-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hidden_layer2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer2_ce0 : OUT STD_LOGIC;
    hidden_layer2_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer2_ce1 : OUT STD_LOGIC;
    hidden_layer2_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer2_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer2_1_ce0 : OUT STD_LOGIC;
    hidden_layer2_1_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer2_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer2_1_ce1 : OUT STD_LOGIC;
    hidden_layer2_1_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer2_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer2_2_ce0 : OUT STD_LOGIC;
    hidden_layer2_2_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer2_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer2_2_ce1 : OUT STD_LOGIC;
    hidden_layer2_2_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer2_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer2_3_ce0 : OUT STD_LOGIC;
    hidden_layer2_3_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer2_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer2_3_ce1 : OUT STD_LOGIC;
    hidden_layer2_3_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    max_22_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_22_out_ap_vld : OUT STD_LOGIC;
    output_layer_1_11_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_layer_1_11_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_FFFFBA4A : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111011101001001010";
    constant ap_const_lv32_268E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011010001110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln58_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_ZL10l3_weights_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ZL10l3_weights_0_ce0 : STD_LOGIC;
    signal p_ZL10l3_weights_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l3_weights_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ZL10l3_weights_0_ce1 : STD_LOGIC;
    signal p_ZL10l3_weights_0_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l3_weights_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ZL10l3_weights_1_ce0 : STD_LOGIC;
    signal p_ZL10l3_weights_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l3_weights_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ZL10l3_weights_1_ce1 : STD_LOGIC;
    signal p_ZL10l3_weights_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l3_weights_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ZL10l3_weights_2_ce0 : STD_LOGIC;
    signal p_ZL10l3_weights_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l3_weights_2_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ZL10l3_weights_2_ce1 : STD_LOGIC;
    signal p_ZL10l3_weights_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l3_weights_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ZL10l3_weights_3_ce0 : STD_LOGIC;
    signal p_ZL10l3_weights_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l3_weights_3_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ZL10l3_weights_3_ce1 : STD_LOGIC;
    signal p_ZL10l3_weights_3_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln58_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1048_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1052 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1052_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1052_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln64_fu_443_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln64_reg_1059 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln64_reg_1059_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln64_reg_1059_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln61_fu_447_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln61_reg_1068 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln4_fu_451_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln4_reg_1073 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln61_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_1078 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_ZL10l3_weights_0_load_reg_1110 : STD_LOGIC_VECTOR (15 downto 0);
    signal hidden_layer2_load_reg_1115 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_ZL10l3_weights_1_load_reg_1120 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l3_weights_2_load_reg_1130 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l3_weights_3_load_reg_1140 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln64_10_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_10_reg_1170 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln64_3_fu_352_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln64_3_reg_1190 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_s_reg_1195 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln64_4_fu_356_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln64_4_reg_1200 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln64_5_fu_360_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln64_5_reg_1205 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_ZL10l3_weights_2_load_1_reg_1210 : STD_LOGIC_VECTOR (15 downto 0);
    signal hidden_layer2_2_load_1_reg_1215 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_ZL10l3_weights_3_load_1_reg_1220 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln64_1_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln64_14_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_6_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_15_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_8_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_11_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal trunc_ln64_7_fu_924_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_98 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln61_2_fu_482_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (5 downto 0);
    signal output_layer_1_11_fu_102 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal output_layer_1_1_fu_954_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_22_fu_106 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal max_2_fu_947_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_110 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln58_3_fu_435_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (1 downto 0);
    signal max_fu_114 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln58_2_fu_774_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_fu_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln58_1_fu_767_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_fu_122 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln58_1_fu_401_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln64_fu_340_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln64_1_fu_344_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln64_2_fu_348_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln64_3_fu_352_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln64_4_fu_356_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln64_5_fu_360_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln64_6_fu_364_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln64_7_fu_368_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln58_fu_413_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln58_fu_427_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_466_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln61_fu_510_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln64_3_fu_515_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln61_fu_519_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln64_4_fu_525_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_503_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln64_8_fu_540_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln61_1_fu_551_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln64_6_fu_557_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln64_9_fu_572_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln64_fu_583_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_593_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln58_4_fu_617_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln64_fu_340_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal shl_ln2_fu_624_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln64_1_fu_632_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln64_fu_636_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_8_fu_651_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln64_1_fu_344_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal shl_ln64_1_fu_661_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln64_3_fu_669_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln64_1_fu_673_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_9_fu_688_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln64_2_fu_348_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal shl_ln64_2_fu_698_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln64_5_fu_706_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln64_2_fu_710_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln64_3_fu_781_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln64_7_fu_788_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln64_3_fu_791_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_1_fu_797_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln64_4_fu_807_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln64_9_fu_815_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln64_4_fu_818_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_2_fu_824_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln64_5_fu_834_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln64_11_fu_842_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln64_5_fu_845_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_4_fu_859_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln64_6_fu_364_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal shl_ln64_6_fu_869_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln64_13_fu_877_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln64_6_fu_881_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_5_fu_896_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln64_7_fu_368_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal shl_ln64_7_fu_906_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln64_15_fu_914_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln64_7_fu_918_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln66_fu_934_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_layer_0_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln64_1_fu_344_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln64_2_fu_348_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln64_3_fu_352_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln64_4_fu_356_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln64_5_fu_360_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln64_6_fu_364_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln64_7_fu_368_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln64_fu_340_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component predict_mul_31ns_16s_47_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component predict_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    p_ZL10l3_weights_0_U : component predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_0_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l3_weights_0_address0,
        ce0 => p_ZL10l3_weights_0_ce0,
        q0 => p_ZL10l3_weights_0_q0,
        address1 => p_ZL10l3_weights_0_address1,
        ce1 => p_ZL10l3_weights_0_ce1,
        q1 => p_ZL10l3_weights_0_q1);

    p_ZL10l3_weights_1_U : component predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_1_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l3_weights_1_address0,
        ce0 => p_ZL10l3_weights_1_ce0,
        q0 => p_ZL10l3_weights_1_q0,
        address1 => p_ZL10l3_weights_1_address1,
        ce1 => p_ZL10l3_weights_1_ce1,
        q1 => p_ZL10l3_weights_1_q1);

    p_ZL10l3_weights_2_U : component predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_2_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l3_weights_2_address0,
        ce0 => p_ZL10l3_weights_2_ce0,
        q0 => p_ZL10l3_weights_2_q0,
        address1 => p_ZL10l3_weights_2_address1,
        ce1 => p_ZL10l3_weights_2_ce1,
        q1 => p_ZL10l3_weights_2_q1);

    p_ZL10l3_weights_3_U : component predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_3_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l3_weights_3_address0,
        ce0 => p_ZL10l3_weights_3_ce0,
        q0 => p_ZL10l3_weights_3_q0,
        address1 => p_ZL10l3_weights_3_address1,
        ce1 => p_ZL10l3_weights_3_ce1,
        q1 => p_ZL10l3_weights_3_q1);

    mul_31ns_16s_47_1_1_U53 : component predict_mul_31ns_16s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 16,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln64_fu_340_p0,
        din1 => p_ZL10l3_weights_0_load_reg_1110,
        dout => mul_ln64_fu_340_p2);

    mul_31ns_16s_47_1_1_U54 : component predict_mul_31ns_16s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 16,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln64_1_fu_344_p0,
        din1 => p_ZL10l3_weights_1_load_reg_1120,
        dout => mul_ln64_1_fu_344_p2);

    mul_31ns_16s_47_1_1_U55 : component predict_mul_31ns_16s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 16,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln64_2_fu_348_p0,
        din1 => p_ZL10l3_weights_2_load_reg_1130,
        dout => mul_ln64_2_fu_348_p2);

    mul_31ns_16s_47_1_1_U56 : component predict_mul_31ns_16s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 16,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln64_3_fu_352_p0,
        din1 => p_ZL10l3_weights_3_load_reg_1140,
        dout => mul_ln64_3_fu_352_p2);

    mul_31ns_16s_47_1_1_U57 : component predict_mul_31ns_16s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 16,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln64_4_fu_356_p0,
        din1 => p_ZL10l3_weights_0_q0,
        dout => mul_ln64_4_fu_356_p2);

    mul_31ns_16s_47_1_1_U58 : component predict_mul_31ns_16s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 16,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln64_5_fu_360_p0,
        din1 => p_ZL10l3_weights_1_q0,
        dout => mul_ln64_5_fu_360_p2);

    mul_31ns_16s_47_1_1_U59 : component predict_mul_31ns_16s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 16,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln64_6_fu_364_p0,
        din1 => p_ZL10l3_weights_2_load_1_reg_1210,
        dout => mul_ln64_6_fu_364_p2);

    mul_31ns_16s_47_1_1_U60 : component predict_mul_31ns_16s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 16,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln64_7_fu_368_p0,
        din1 => p_ZL10l3_weights_3_load_1_reg_1220,
        dout => mul_ln64_7_fu_368_p2);

    flow_control_loop_pipe_sequential_init_U : component predict_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_fu_94 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    empty_fu_94 <= add_ln64_7_fu_918_p2(47 downto 16);
                end if;
            end if; 
        end if;
    end process;

    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_395_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_98 <= add_ln61_2_fu_482_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_98 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_395_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_122 <= add_ln58_1_fu_401_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_122 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_395_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_110 <= select_ln58_3_fu_435_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_110 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln58_reg_1048 <= icmp_ln58_fu_395_p2;
                icmp_ln58_reg_1048_pp0_iter1_reg <= icmp_ln58_reg_1048;
                lshr_ln4_reg_1073 <= select_ln58_fu_427_p3(4 downto 2);
                tmp_reg_1052 <= ap_sig_allocacmp_i_load(5 downto 5);
                tmp_reg_1052_pp0_iter1_reg <= tmp_reg_1052;
                trunc_ln61_reg_1068 <= trunc_ln61_fu_447_p1;
                trunc_ln64_reg_1059 <= trunc_ln64_fu_443_p1;
                trunc_ln64_reg_1059_pp0_iter1_reg <= trunc_ln64_reg_1059;
                    zext_ln61_reg_1078(2 downto 0) <= zext_ln61_fu_461_p1(2 downto 0);
                    zext_ln64_10_reg_1170(2 downto 1) <= zext_ln64_10_fu_588_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                hidden_layer2_2_load_1_reg_1215 <= hidden_layer2_2_q0;
                p_ZL10l3_weights_2_load_1_reg_1210 <= p_ZL10l3_weights_2_q0;
                p_ZL10l3_weights_3_load_1_reg_1220 <= p_ZL10l3_weights_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                hidden_layer2_load_reg_1115 <= hidden_layer2_q1;
                p_ZL10l3_weights_0_load_reg_1110 <= p_ZL10l3_weights_0_q1;
                p_ZL10l3_weights_1_load_reg_1120 <= p_ZL10l3_weights_1_q1;
                p_ZL10l3_weights_2_load_reg_1130 <= p_ZL10l3_weights_2_q1;
                p_ZL10l3_weights_3_load_reg_1140 <= p_ZL10l3_weights_3_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                max_1_fu_118 <= select_ln58_1_fu_767_p3;
                max_22_fu_106 <= max_2_fu_947_p3;
                max_fu_114 <= select_ln58_2_fu_774_p3;
                output_layer_1_11_fu_102 <= output_layer_1_1_fu_954_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                mul_ln64_3_reg_1190 <= mul_ln64_3_fu_352_p2;
                mul_ln64_4_reg_1200 <= mul_ln64_4_fu_356_p2;
                mul_ln64_5_reg_1205 <= mul_ln64_5_fu_360_p2;
                tmp_reg_1052_pp0_iter2_reg <= tmp_reg_1052_pp0_iter1_reg;
                tmp_s_reg_1195 <= add_ln64_2_fu_710_p2(47 downto 16);
                trunc_ln64_reg_1059_pp0_iter2_reg <= trunc_ln64_reg_1059_pp0_iter1_reg;
            end if;
        end if;
    end process;
    zext_ln61_reg_1078(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln64_10_reg_1170(0) <= '1';
    zext_ln64_10_reg_1170(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln58_1_fu_401_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv4_1));
    add_ln58_fu_413_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_load) + unsigned(ap_const_lv2_1));
    add_ln61_1_fu_551_p2 <= std_logic_vector(unsigned(zext_ln64_3_fu_515_p1) + unsigned(ap_const_lv6_3));
    add_ln61_2_fu_482_p2 <= std_logic_vector(unsigned(select_ln58_fu_427_p3) + unsigned(ap_const_lv6_8));
    add_ln61_fu_519_p2 <= std_logic_vector(unsigned(zext_ln64_3_fu_515_p1) + unsigned(ap_const_lv6_2));
    add_ln64_1_fu_673_p2 <= std_logic_vector(unsigned(shl_ln64_1_fu_661_p3) + unsigned(sext_ln64_3_fu_669_p1));
    add_ln64_2_fu_710_p2 <= std_logic_vector(unsigned(shl_ln64_2_fu_698_p3) + unsigned(sext_ln64_5_fu_706_p1));
    add_ln64_3_fu_791_p2 <= std_logic_vector(unsigned(shl_ln64_3_fu_781_p3) + unsigned(sext_ln64_7_fu_788_p1));
    add_ln64_4_fu_818_p2 <= std_logic_vector(unsigned(shl_ln64_4_fu_807_p3) + unsigned(sext_ln64_9_fu_815_p1));
    add_ln64_5_fu_845_p2 <= std_logic_vector(unsigned(shl_ln64_5_fu_834_p3) + unsigned(sext_ln64_11_fu_842_p1));
    add_ln64_6_fu_881_p2 <= std_logic_vector(unsigned(shl_ln64_6_fu_869_p3) + unsigned(sext_ln64_13_fu_877_p1));
    add_ln64_7_fu_918_p2 <= std_logic_vector(unsigned(shl_ln64_7_fu_906_p3) + unsigned(sext_ln64_15_fu_914_p1));
    add_ln64_8_fu_540_p2 <= std_logic_vector(unsigned(tmp_6_fu_503_p3) + unsigned(lshr_ln64_4_fu_525_p4));
    add_ln64_9_fu_572_p2 <= std_logic_vector(unsigned(tmp_6_fu_503_p3) + unsigned(lshr_ln64_6_fu_557_p4));
    add_ln64_fu_636_p2 <= std_logic_vector(unsigned(shl_ln2_fu_624_p3) + unsigned(sext_ln64_1_fu_632_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln58_fu_395_p2)
    begin
        if (((icmp_ln58_fu_395_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_122)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_110)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, empty_fu_94, add_ln64_7_fu_918_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_load <= add_ln64_7_fu_918_p2(47 downto 16);
        else 
            ap_sig_allocacmp_p_load <= empty_fu_94;
        end if; 
    end process;

    hidden_layer2_1_address0 <= zext_ln64_8_fu_567_p1(3 - 1 downto 0);
    hidden_layer2_1_address1 <= zext_ln61_reg_1078(3 - 1 downto 0);

    hidden_layer2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer2_1_ce0 <= ap_const_logic_1;
        else 
            hidden_layer2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hidden_layer2_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer2_1_ce1 <= ap_const_logic_1;
        else 
            hidden_layer2_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hidden_layer2_2_address0 <= zext_ln64_10_fu_588_p1(3 - 1 downto 0);
    hidden_layer2_2_address1 <= zext_ln61_reg_1078(3 - 1 downto 0);

    hidden_layer2_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer2_2_ce0 <= ap_const_logic_1;
        else 
            hidden_layer2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hidden_layer2_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer2_2_ce1 <= ap_const_logic_1;
        else 
            hidden_layer2_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hidden_layer2_3_address0 <= zext_ln64_10_reg_1170(3 - 1 downto 0);
    hidden_layer2_3_address1 <= zext_ln61_reg_1078(3 - 1 downto 0);

    hidden_layer2_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            hidden_layer2_3_ce0 <= ap_const_logic_1;
        else 
            hidden_layer2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hidden_layer2_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer2_3_ce1 <= ap_const_logic_1;
        else 
            hidden_layer2_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hidden_layer2_address0 <= zext_ln64_6_fu_535_p1(3 - 1 downto 0);
    hidden_layer2_address1 <= zext_ln61_fu_461_p1(3 - 1 downto 0);

    hidden_layer2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer2_ce0 <= ap_const_logic_1;
        else 
            hidden_layer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hidden_layer2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer2_ce1 <= ap_const_logic_1;
        else 
            hidden_layer2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln58_fu_395_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv4_8) else "0";
    lshr_ln4_fu_451_p4 <= select_ln58_fu_427_p3(4 downto 2);
    lshr_ln64_4_fu_525_p4 <= add_ln61_fu_519_p2(5 downto 2);
    lshr_ln64_6_fu_557_p4 <= add_ln61_1_fu_551_p2(5 downto 2);
    max_22_out <= max_22_fu_106;

    max_22_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1048_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_1048_pp0_iter1_reg = ap_const_lv1_1))) then 
            max_22_out_ap_vld <= ap_const_logic_1;
        else 
            max_22_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    max_2_fu_947_p3 <= 
        output_layer_0_fu_941_p2 when (trunc_ln64_reg_1059_pp0_iter2_reg(0) = '1') else 
        select_ln58_1_fu_767_p3;
    mul_ln64_1_fu_344_p0 <= mul_ln64_1_fu_344_p00(31 - 1 downto 0);
    mul_ln64_1_fu_344_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer2_1_q1),47));
    mul_ln64_2_fu_348_p0 <= mul_ln64_2_fu_348_p00(31 - 1 downto 0);
    mul_ln64_2_fu_348_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer2_2_q1),47));
    mul_ln64_3_fu_352_p0 <= mul_ln64_3_fu_352_p00(31 - 1 downto 0);
    mul_ln64_3_fu_352_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer2_3_q1),47));
    mul_ln64_4_fu_356_p0 <= mul_ln64_4_fu_356_p00(31 - 1 downto 0);
    mul_ln64_4_fu_356_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer2_q0),47));
    mul_ln64_5_fu_360_p0 <= mul_ln64_5_fu_360_p00(31 - 1 downto 0);
    mul_ln64_5_fu_360_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer2_1_q0),47));
    mul_ln64_6_fu_364_p0 <= mul_ln64_6_fu_364_p00(31 - 1 downto 0);
    mul_ln64_6_fu_364_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer2_2_load_1_reg_1215),47));
    mul_ln64_7_fu_368_p0 <= mul_ln64_7_fu_368_p00(31 - 1 downto 0);
    mul_ln64_7_fu_368_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer2_3_q0),47));
    mul_ln64_fu_340_p0 <= mul_ln64_fu_340_p00(31 - 1 downto 0);
    mul_ln64_fu_340_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer2_load_reg_1115),47));
    or_ln61_fu_510_p2 <= (trunc_ln61_reg_1068 or ap_const_lv5_2);
    or_ln64_fu_583_p2 <= (lshr_ln4_reg_1073 or ap_const_lv3_1);
    output_layer_0_fu_941_p2 <= std_logic_vector(unsigned(select_ln66_fu_934_p3) + unsigned(trunc_ln64_7_fu_924_p4));
    output_layer_1_11_out <= output_layer_1_11_fu_102;

    output_layer_1_11_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1048_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_1048_pp0_iter1_reg = ap_const_lv1_1))) then 
            output_layer_1_11_out_ap_vld <= ap_const_logic_1;
        else 
            output_layer_1_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_layer_1_1_fu_954_p3 <= 
        select_ln58_2_fu_774_p3 when (trunc_ln64_reg_1059_pp0_iter2_reg(0) = '1') else 
        output_layer_0_fu_941_p2;
    p_ZL10l3_weights_0_address0 <= zext_ln64_14_fu_546_p1(4 - 1 downto 0);
    p_ZL10l3_weights_0_address1 <= zext_ln64_1_fu_474_p1(4 - 1 downto 0);

    p_ZL10l3_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l3_weights_0_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l3_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l3_weights_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l3_weights_0_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l3_weights_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZL10l3_weights_1_address0 <= zext_ln64_15_fu_578_p1(4 - 1 downto 0);
    p_ZL10l3_weights_1_address1 <= zext_ln64_1_fu_474_p1(4 - 1 downto 0);

    p_ZL10l3_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l3_weights_1_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l3_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l3_weights_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l3_weights_1_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l3_weights_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZL10l3_weights_2_address0 <= zext_ln64_11_fu_600_p1(4 - 1 downto 0);
    p_ZL10l3_weights_2_address1 <= zext_ln64_1_fu_474_p1(4 - 1 downto 0);

    p_ZL10l3_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l3_weights_2_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l3_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l3_weights_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l3_weights_2_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l3_weights_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZL10l3_weights_3_address0 <= zext_ln64_11_fu_600_p1(4 - 1 downto 0);
    p_ZL10l3_weights_3_address1 <= zext_ln64_1_fu_474_p1(4 - 1 downto 0);

    p_ZL10l3_weights_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l3_weights_3_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l3_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l3_weights_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l3_weights_3_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l3_weights_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln58_1_fu_767_p3 <= 
        max_22_fu_106 when (tmp_reg_1052_pp0_iter2_reg(0) = '1') else 
        max_1_fu_118;
    select_ln58_2_fu_774_p3 <= 
        output_layer_1_11_fu_102 when (tmp_reg_1052_pp0_iter2_reg(0) = '1') else 
        max_fu_114;
    select_ln58_3_fu_435_p3 <= 
        add_ln58_fu_413_p2 when (tmp_fu_419_p3(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln58_4_fu_617_p3 <= 
        ap_const_lv32_0 when (tmp_reg_1052_pp0_iter1_reg(0) = '1') else 
        ap_sig_allocacmp_p_load;
    select_ln58_fu_427_p3 <= 
        ap_const_lv6_0 when (tmp_fu_419_p3(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln66_fu_934_p3 <= 
        ap_const_lv32_FFFFBA4A when (trunc_ln64_reg_1059_pp0_iter2_reg(0) = '1') else 
        ap_const_lv32_268E;
        sext_ln64_11_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln64_5_reg_1205),48));

        sext_ln64_13_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln64_6_fu_364_p2),48));

        sext_ln64_15_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln64_7_fu_368_p2),48));

        sext_ln64_1_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln64_fu_340_p2),48));

        sext_ln64_3_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln64_1_fu_344_p2),48));

        sext_ln64_5_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln64_2_fu_348_p2),48));

        sext_ln64_7_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln64_3_reg_1190),48));

        sext_ln64_9_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln64_4_reg_1200),48));

    shl_ln2_fu_624_p3 <= (select_ln58_4_fu_617_p3 & ap_const_lv16_0);
    shl_ln64_1_fu_661_p3 <= (tmp_8_fu_651_p4 & ap_const_lv16_0);
    shl_ln64_2_fu_698_p3 <= (tmp_9_fu_688_p4 & ap_const_lv16_0);
    shl_ln64_3_fu_781_p3 <= (tmp_s_reg_1195 & ap_const_lv16_0);
    shl_ln64_4_fu_807_p3 <= (tmp_1_fu_797_p4 & ap_const_lv16_0);
    shl_ln64_5_fu_834_p3 <= (tmp_2_fu_824_p4 & ap_const_lv16_0);
    shl_ln64_6_fu_869_p3 <= (tmp_4_fu_859_p4 & ap_const_lv16_0);
    shl_ln64_7_fu_906_p3 <= (tmp_5_fu_896_p4 & ap_const_lv16_0);
    tmp_1_fu_797_p4 <= add_ln64_3_fu_791_p2(47 downto 16);
    tmp_2_fu_824_p4 <= add_ln64_4_fu_818_p2(47 downto 16);
    tmp_3_fu_593_p3 <= (trunc_ln64_reg_1059 & or_ln64_fu_583_p2);
    tmp_4_fu_859_p4 <= add_ln64_5_fu_845_p2(47 downto 16);
    tmp_5_fu_896_p4 <= add_ln64_6_fu_881_p2(47 downto 16);
    tmp_6_fu_503_p3 <= (trunc_ln64_reg_1059 & ap_const_lv3_0);
    tmp_7_fu_466_p3 <= (trunc_ln64_fu_443_p1 & lshr_ln4_fu_451_p4);
    tmp_8_fu_651_p4 <= add_ln64_fu_636_p2(47 downto 16);
    tmp_9_fu_688_p4 <= add_ln64_1_fu_673_p2(47 downto 16);
    tmp_fu_419_p3 <= ap_sig_allocacmp_i_load(5 downto 5);
    trunc_ln61_fu_447_p1 <= select_ln58_fu_427_p3(5 - 1 downto 0);
    trunc_ln64_7_fu_924_p4 <= add_ln64_7_fu_918_p2(47 downto 16);
    trunc_ln64_fu_443_p1 <= select_ln58_3_fu_435_p3(1 - 1 downto 0);
    zext_ln61_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln4_fu_451_p4),64));
    zext_ln64_10_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln64_fu_583_p2),64));
    zext_ln64_11_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_593_p3),64));
    zext_ln64_14_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln64_8_fu_540_p2),64));
    zext_ln64_15_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln64_9_fu_572_p2),64));
    zext_ln64_1_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_466_p3),64));
    zext_ln64_3_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_fu_510_p2),6));
    zext_ln64_6_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln64_4_fu_525_p4),64));
    zext_ln64_8_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln64_6_fu_557_p4),64));
end behav;
