-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_0_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 288
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);
 
          address1        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1             : in std_logic; 
          q1              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_0_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0010100110000001", 1 => "1110000000000011", 2 => "0110100110111101", 3 => "0001011101011011", 
    4 => "0001001101111000", 5 => "1111010011001101", 6 => "1100011100111101", 7 => "1110001001110010", 
    8 => "0011110001010000", 9 => "0000111110000100", 10 => "0010000111000100", 11 => "1101010011100001", 
    12 => "0010000101101010", 13 => "1100111001011001", 14 => "1111110111000010", 15 => "0001010001010110", 
    16 => "1111110011011110", 17 => "1101001001001010", 18 => "0001110110101010", 19 => "1110100000111111", 
    20 => "1110011010100010", 21 => "0010010010001100", 22 => "1111101111100100", 23 => "0000011001100100", 
    24 => "0010000100001110", 25 => "1111000100110010", 26 => "1110111001010101", 27 => "1101010001000011", 
    28 => "1101000011100100", 29 => "1101100010001000", 30 => "1111111000100010", 31 => "1010001100110010", 
    32 => "0010010100111000", 33 => "0000000011010100", 34 => "1110100000110010", 35 => "1111110101000100", 
    36 => "1101011000011101", 37 => "0100010101100101", 38 => "1100000001001100", 39 => "0000101000100111", 
    40 => "0011110110001010", 41 => "0000010100010001", 42 => "0001110001010011", 43 => "0000000110101010", 
    44 => "1011100100111000", 45 => "0000001110110111", 46 => "0000011000101110", 47 => "1011100100110001", 
    48 => "0010011101000010", 49 => "1111001111110100", 50 => "1101100001000011", 51 => "0010110101110100", 
    52 => "1111111110001011", 53 => "1100011011100111", 54 => "1110101010111101", 55 => "1111100110100001", 
    56 => "0001000001000111", 57 => "1101001110100010", 58 => "0000100010001100", 59 => "0000101010111011", 
    60 => "1111110010110000", 61 => "1110011101101011", 62 => "0001000010101010", 63 => "0001010010111001", 
    64 => "0011010100010111", 65 => "0001000110110101", 66 => "0001001110110011", 67 => "0011000000100001", 
    68 => "1111110111100000", 69 => "1011110100101101", 70 => "1101001110100010", 71 => "1101100010000000", 
    72 => "0010111110101110", 73 => "1010101101011110", 74 => "1101110010110110", 75 => "1111110011100001", 
    76 => "1110000101010110", 77 => "1111001001100111", 78 => "1111011011011101", 79 => "0001010001000111", 
    80 => "1101110110000000", 81 => "1111100100100011", 82 => "1111011111101001", 83 => "0010110100010001", 
    84 => "1101011000011001", 85 => "1110011011001001", 86 => "1111010000010111", 87 => "1101000011110001", 
    88 => "0010111101010111", 89 => "0100011010101111", 90 => "1100110010110100", 91 => "0010000111000110", 
    92 => "1001101010001000", 93 => "1111101111000100", 94 => "0010000000101110", 95 => "0000100010100100", 
    96 => "1111101110011001", 97 => "0000001011001110", 98 => "1110101100001010", 99 => "1110110010111101", 
    100 => "0000001101101111", 101 => "1110011000100000", 102 => "1111100110011010", 103 => "0001100101001110", 
    104 => "1101111100110010", 105 => "0000110101001111", 106 => "0001001011101111", 107 => "1110000100010101", 
    108 => "1101101111100100", 109 => "1100010010011001", 110 => "1100010101011000", 111 => "0001111001110010", 
    112 => "1111100110011100", 113 => "1101011110010011", 114 => "1111100110111100", 115 => "0000001011110101", 
    116 => "0000001011100110", 117 => "0001011001111101", 118 => "0010100101011010", 119 => "1010011111011110", 
    120 => "0010100001010010", 121 => "1101011111110000", 122 => "0000111001110100", 123 => "0001101100110001", 
    124 => "0000110011000101", 125 => "1101010100101111", 126 => "0011000100111001", 127 => "1111010010000111", 
    128 => "1011100011100101", 129 => "0010110101000010", 130 => "1110111011110101", 131 => "0000000100111110", 
    132 => "0001111011110110", 133 => "1111010111111011", 134 => "1100010000100100", 135 => "0010000011001010", 
    136 => "0010001000101001", 137 => "0001000010010001", 138 => "1111011110000011", 139 => "0011100100110100", 
    140 => "0001010010001100", 141 => "1111111111011101", 142 => "1100000000111010", 143 => "1110001101011110", 
    144 => "0000111011110110", 145 => "1111110011100011", 146 => "0100110000000110", 147 => "1110001101101001", 
    148 => "1110010010110000", 149 => "0001001010110111", 150 => "1101010010010111", 151 => "0000010110011100", 
    152 => "0100100010011010", 153 => "1111001101110101", 154 => "1111011001100110", 155 => "1110011000011011", 
    156 => "0000111010000000", 157 => "1110010110100011", 158 => "0000000100000001", 159 => "1100101000001110", 
    160 => "1111100101010101", 161 => "1100011011011011", 162 => "1110110101110001", 163 => "1111110000100001", 
    164 => "0011000100111010", 165 => "1110011000101011", 166 => "0000110001101110", 167 => "0010001110110011", 
    168 => "0001000100101000", 169 => "1111100100101110", 170 => "0011001000110010", 171 => "1110001111101111", 
    172 => "0000010011011000", 173 => "0100101000000000", 174 => "0001111110000011", 175 => "0010101010101111", 
    176 => "0001110101100110", 177 => "1011000001101000", 178 => "0000011011100110", 179 => "0010001101110000", 
    180 => "0001001110000001", 181 => "1111000100101101", 182 => "0010000010001100", 183 => "1100100011010111", 
    184 => "1101100100010010", 185 => "0001100110001110", 186 => "1100001100111110", 187 => "1110101010011111", 
    188 => "0001001111011100", 189 => "1111000011110110", 190 => "1111101000001110", 191 => "1100011011000010", 
    192 => "1111001111101001", 193 => "1111010111011000", 194 => "1101001101100011", 195 => "1111011010001011", 
    196 => "1101101000100110", 197 => "1101101011101101", 198 => "1110001000011000", 199 => "1110000000111010", 
    200 => "0010000111111111", 201 => "0011001001010010", 202 => "0011111010101101", 203 => "0010000111111100", 
    204 => "1101111010000111", 205 => "0000100000111111", 206 => "0000010000010111", 207 => "0000111101101111", 
    208 => "0001000111111001", 209 => "0010100001111101", 210 => "1111010001001100", 211 => "0000101000001001", 
    212 => "0010100010100000", 213 => "1011010010001110", 214 => "0001101100110100", 215 => "0010110100000100", 
    216 => "1100110011101011", 217 => "1111011001011001", 218 => "0101010011001010", 219 => "0010001011001110", 
    220 => "0000100000101111", 221 => "0010111101001010", 222 => "1001110001110010", 223 => "0000001001011011", 
    224 => "0001101010101110", 225 => "0111001011111011", 226 => "1111111010011010", 227 => "0011110100101110", 
    228 => "1111001111101111", 229 => "1101101011101101", 230 => "1011100001001000", 231 => "0011011010110011", 
    232 => "1111011111110001", 233 => "0001010100110001", 234 => "1110011101100001", 235 => "0000111010101001", 
    236 => "0010011100101111", 237 => "1100001101111011", 238 => "0010000101110000", 239 => "1111011100100110", 
    240 => "1100100000101001", 241 => "1111100111111110", 242 => "0011001101100000", 243 => "0001101100001000", 
    244 => "1111000110111011", 245 => "1111110100101010", 246 => "1100100001110000", 247 => "0001001110100010", 
    248 => "1110100101010101", 249 => "0000101001110100", 250 => "0000001111010000", 251 => "1101101000011101", 
    252 => "1100011101000110", 253 => "1110000000100000", 254 => "1111100000000111", 255 => "1111010011101110", 
    256 => "0001110101000111", 257 => "0000111001111001", 258 => "1101000011011001", 259 => "1111111111110011", 
    260 => "1101001010011010", 261 => "0000010100100100", 262 => "1111010010000100", 263 => "1010000100010010", 
    264 => "1111101100011100", 265 => "1100010001100010", 266 => "1100110111011111", 267 => "0101001101111101", 
    268 => "1111100010110000", 269 => "1110010110101001", 270 => "1110100010111010", 271 => "0010111011111100", 
    272 => "1010001100001001", 273 => "1110010010111110", 274 => "1110101101101100", 275 => "1101101001010010", 
    276 => "0001100010110011", 277 => "0001001001011000", 278 => "1101111001100110", 279 => "1111111110011001", 
    280 => "1111100110010000", 281 => "0001001110110101", 282 => "0010010010111101", 283 => "0000100000010011", 
    284 => "1110110110011011", 285 => "1111011110010000", 286 => "1111000111100110", 287 => "0000011100111111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;
 
        if (ce1 = '1') then  
            q1 <= mem0(CONV_INTEGER(address1_tmp)); 
        end if;

end if;
end process;

end rtl;

