-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_1_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 17; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 256
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);
 
          address1        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1             : in std_logic; 
          q1              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_1_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "11110000000110101", 1 => "11110101111111010", 2 => "11111111000001011", 3 => "11101111010010000", 
    4 => "11111000110011111", 5 => "11110111011111000", 6 => "00001110000001100", 7 => "00000010000001111", 
    8 => "00010001000110101", 9 => "11111011110110110", 10 => "00000001100110011", 11 => "11110010000000111", 
    12 => "00000111011011111", 13 => "00000110001010111", 14 => "00000000100110110", 15 => "11101101101111101", 
    16 => "00000101110001001", 17 => "11101101000101011", 18 => "00100001010110101", 19 => "00001110110001111", 
    20 => "00001010100000001", 21 => "11110001011000000", 22 => "00000110001011111", 23 => "11111010011001100", 
    24 => "00010011000110001", 25 => "00110100101100000", 26 => "11111111000110000", 27 => "00010010001111110", 
    28 => "11110101100001000", 29 => "11111010110011100", 30 => "00010011000101001", 31 => "00100110111010111", 
    32 => "00010111101111110", 33 => "00000010000111100", 34 => "11110011010001100", 35 => "11011110000100101", 
    36 => "00001000011000011", 37 => "00010001001010100", 38 => "00000101111010011", 39 => "11101011100110111", 
    40 => "11111101100010011", 41 => "11110111100011001", 42 => "00010111010000001", 43 => "00000111010001010", 
    44 => "11111101100111110", 45 => "11110011110101011", 46 => "00010101101011101", 47 => "11011100010000101", 
    48 => "00001100100111111", 49 => "11011111110110001", 50 => "00010110110111010", 51 => "11110011101111011", 
    52 => "11111001000010110", 53 => "00000100010101000", 54 => "00000101111110110", 55 => "11100111000000101", 
    56 => "00011101010011101", 57 => "00010101000011101", 58 => "11101000101110000", 59 => "00100100100101110", 
    60 => "11111000011001001", 61 => "11110111101000001", 62 => "00010000011110100", 63 => "00110100101010111", 
    64 => "00001101000111101", 65 => "00001000111011000", 66 => "11100111110100010", 67 => "00011111101100100", 
    68 => "00001000001101101", 69 => "00000010010000010", 70 => "11110110001110100", 71 => "00101011110100011", 
    72 => "00001100110101100", 73 => "00000011110000100", 74 => "00000010101010110", 75 => "11110001001110011", 
    76 => "00010101011001010", 77 => "11110000011010010", 78 => "11111100101011111", 79 => "11111000001111101", 
    80 => "11100110100000001", 81 => "11110100001110110", 82 => "00100010000010111", 83 => "00000000001010111", 
    84 => "11111101100100101", 85 => "11111111010001111", 86 => "00000110111010111", 87 => "11100111111011111", 
    88 => "11110111010111110", 89 => "00000000100010111", 90 => "00010111100001110", 91 => "11101111100010001", 
    92 => "00000001000001101", 93 => "11110110101010111", 94 => "00001001000011110", 95 => "11101011101111000", 
    96 => "00001010001111110", 97 => "11100100110100001", 98 => "00011110000011111", 99 => "11111111000000101", 
    100 => "00000110000010111", 101 => "00011000111001111", 102 => "11111011110101011", 103 => "11101100100001011", 
    104 => "00000001001001101", 105 => "11110111111100000", 106 => "00011111001111010", 107 => "11100101100000110", 
    108 => "11110101100101010", 109 => "00000001111100110", 110 => "11110011100011111", 111 => "11110110000100011", 
    112 => "00001101001101000", 113 => "11110011100000101", 114 => "00010111101011001", 115 => "11111000001111010", 
    116 => "11101100000111011", 117 => "11110011010010110", 118 => "00000010000101111", 119 => "11101000111111110", 
    120 => "00001100111101110", 121 => "00001100110100100", 122 => "11111100000011010", 123 => "11111000111010101", 
    124 => "11111101100100011", 125 => "00000011000111000", 126 => "00000110111111110", 127 => "00110111001110011", 
    128 => "00010000101110000", 129 => "00001010000100010", 130 => "00000010000010011", 131 => "00001011110011011", 
    132 => "00010000100111110", 133 => "11110011010000001", 134 => "00001111011100100", 135 => "00100000101010000", 
    136 => "11101101111101111", 137 => "11100110011110000", 138 => "00010010000101100", 139 => "00000011010111001", 
    140 => "00000110000100110", 141 => "00001100100000010", 142 => "00100010010010011", 143 => "11100100001101010", 
    144 => "11101001111101011", 145 => "00000001111000111", 146 => "00100100010010001", 147 => "11110100011101101", 
    148 => "11111000010100111", 149 => "11111100010100000", 150 => "11101100011100001", 151 => "11100000001001011", 
    152 => "00100000001110111", 153 => "11101100100101101", 154 => "11101100011011100", 155 => "11111000111100101", 
    156 => "11101011001100111", 157 => "00011011100011000", 158 => "11111000000010111", 159 => "00001001111100011", 
    160 => "11101011011001001", 161 => "11111010110001100", 162 => "11100011101100100", 163 => "11110001001010001", 
    164 => "00010111000000001", 165 => "11111100100000110", 166 => "11100001000110100", 167 => "11111010110001111", 
    168 => "11111001111011000", 169 => "00000011111101101", 170 => "00001001111101110", 171 => "00101010000000100", 
    172 => "00000011101011111", 173 => "00000110111101110", 174 => "11110110100011101", 175 => "00011100010101110", 
    176 => "00001010011101110", 177 => "00100000101001001", 178 => "11110001110010000", 179 => "11110100100001110", 
    180 => "00001011111010110", 181 => "00000000111110110", 182 => "11100110100111010", 183 => "00101011000011101", 
    184 => "11110010100011011", 185 => "11110010111111110", 186 => "00011110011001010", 187 => "00000110111000011", 
    188 => "11101010011001001", 189 => "11111100001101000", 190 => "00001010111111011", 191 => "11100111100111111", 
    192 => "00000000110111010", 193 => "11110011111000000", 194 => "00011011111101011", 195 => "11110011111001101", 
    196 => "00000000100000000", 197 => "11110000101010110", 198 => "00011000011101010", 199 => "11110000001000101", 
    200 => "00001001011000110", 201 => "11111101110100010", 202 => "00001000101101111", 203 => "00010001101000110", 
    204 => "11111001111010100", 205 => "11110000000101110", 206 => "00010011111001001", 207 => "11100101010011101", 
    208 => "00000001111100101", 209 => "00010111010111110", 210 => "11100101010100101", 211 => "00001111001101101", 
    212 => "11101110101001101", 213 => "11101101011110111", 214 => "11101101000000010", 215 => "00011011010101010", 
    216 => "11111110011100011", 217 => "11100011100000100", 218 => "00011100010000110", 219 => "11110100110001101", 
    220 => "00001001001011110", 221 => "00000010101100100", 222 => "00010000000010000", 223 => "11101110011010010", 
    224 => "00100010111111000", 225 => "00101011011000001", 226 => "11101101101100000", 227 => "00100100011000011", 
    228 => "00001000111011001", 229 => "11110111011101001", 230 => "00001111000001101", 231 => "00011100011100011", 
    232 => "00011000111101110", 233 => "00101110110010011", 234 => "11110001101000001", 235 => "00001001000010000", 
    236 => "00010011101011000", 237 => "00001000011101000", 238 => "11110111111001011", 239 => "00001100000000000", 
    240 => "00001010011110101", 241 => "11111111010100010", 242 => "11100111011100011", 243 => "00000100010010100", 
    244 => "11110110111011011", 245 => "11110111010000010", 246 => "11110000100001011", 247 => "11101011000100001", 
    248 => "01000001000001101", 249 => "01101110001000000", 250 => "11111001010010110", 251 => "11110101011100010", 
    252 => "11111011101000001", 253 => "00000000011001000", 254 => "11101010101010000", 255 => "00100010101010011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;
 
        if (ce1 = '1') then  
            q1 <= mem0(CONV_INTEGER(address1_tmp)); 
        end if;

end if;
end process;

end rtl;

