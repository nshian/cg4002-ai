-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_2_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 256
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);
 
          address1        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1             : in std_logic; 
          q1              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_2_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1111111100101011", 1 => "1111011101111010", 2 => "1011000100000100", 3 => "1101101101101111", 
    4 => "1111100111010000", 5 => "0001011101011100", 6 => "0011111011101111", 7 => "1101001010111011", 
    8 => "0001010111010001", 9 => "0010010111010111", 10 => "0000011111000101", 11 => "1111100100101110", 
    12 => "0011010101001101", 13 => "0001011011100101", 14 => "0001101111110110", 15 => "1100101101110001", 
    16 => "1111101010111101", 17 => "0000001001011101", 18 => "1111000110011010", 19 => "1100101110000000", 
    20 => "0000001111101010", 21 => "0001001111101010", 22 => "1111000101011000", 23 => "1110110101010111", 
    24 => "0000011010010011", 25 => "0010110001110011", 26 => "0101110010010000", 27 => "0110000011111010", 
    28 => "0001001111001111", 29 => "0000000010000011", 30 => "0001101011011111", 31 => "0101000011101100", 
    32 => "0010100010100101", 33 => "1100100011101010", 34 => "0100010101001010", 35 => "1111111010100001", 
    36 => "1101000001110110", 37 => "1100011111111110", 38 => "1111011001001111", 39 => "0001101110001110", 
    40 => "1110101110100000", 41 => "0010010011000011", 42 => "0000011010001011", 43 => "1111010010011110", 
    44 => "1110100000110100", 45 => "0000010001110001", 46 => "0011010100010010", 47 => "1110100010001111", 
    48 => "0010001010101110", 49 => "0011010100111011", 50 => "1100110001101110", 51 => "1101110001011010", 
    52 => "0011110000000101", 53 => "1110111001011010", 54 => "0000100000001100", 55 => "1110011010010010", 
    56 => "1111111010111111", 57 => "1111111100000101", 58 => "0000111110100100", 59 => "0011110001111010", 
    60 => "1110010100001110", 61 => "0010101101011001", 62 => "1101011111001110", 63 => "0000111110111011", 
    64 => "1111110101101100", 65 => "0010111011000010", 66 => "1111000101011000", 67 => "0100000110111111", 
    68 => "0001100101011100", 69 => "0001100000101101", 70 => "0001011001011001", 71 => "0011110101010000", 
    72 => "1101011100111000", 73 => "1110111010111010", 74 => "1110000010010001", 75 => "0000010011111000", 
    76 => "1101111111110100", 77 => "1110000001000111", 78 => "0000100001110000", 79 => "1111101111111111", 
    80 => "0001010101011000", 81 => "0000001100101001", 82 => "1111011010100110", 83 => "1111110110101000", 
    84 => "0011000001010111", 85 => "0001010011110001", 86 => "0011111101000101", 87 => "1101010100101111", 
    88 => "1110100010100010", 89 => "0010101100101010", 90 => "1111100101011011", 91 => "1101001110001000", 
    92 => "0011111100011111", 93 => "1111010110100110", 94 => "0100011100110011", 95 => "1101010111011000", 
    96 => "0000010110111011", 97 => "0001111000001011", 98 => "1011011110001000", 99 => "1100101000010110", 
    100 => "0001111111101001", 101 => "0000101000001001", 102 => "0011110100111000", 103 => "1101101010111001", 
    104 => "1101011101000101", 105 => "0000000000010000", 106 => "1110000001101001", 107 => "1111010110000100", 
    108 => "0011010111010110", 109 => "0001111100011001", 110 => "0010100011111010", 111 => "1111000110011000", 
    112 => "1101111111010111", 113 => "0010110010000001", 114 => "1110000000101110", 115 => "0001001100111000", 
    116 => "0001110011101010", 117 => "0010111011001110", 118 => "0010101110010110", 119 => "0000000101111101", 
    120 => "1110101001000100", 121 => "1111110111010110", 122 => "1111100101000010", 123 => "0101110011111001", 
    124 => "0000110111011100", 125 => "1100110010000100", 126 => "1101111001101100", 127 => "0010001111100101", 
    128 => "1111100010100001", 129 => "0100111001110101", 130 => "0100100000001010", 131 => "0010001001011100", 
    132 => "0001100101011100", 133 => "0001111011100111", 134 => "1101000110101011", 135 => "0100001000010100", 
    136 => "1110101011111110", 137 => "0001100011011110", 138 => "1110011110011000", 139 => "1100010001011001", 
    140 => "0010001111001101", 141 => "0011010000000111", 142 => "0010100001111111", 143 => "1111110101100110", 
    144 => "1101001100100111", 145 => "0100001100000011", 146 => "0001000111000101", 147 => "0001011100110000", 
    148 => "1110011001001011", 149 => "1111011110001100", 150 => "0110011011000101", 151 => "0000011100111000", 
    152 => "1111110010001110", 153 => "0001001011011000", 154 => "0100100000000010", 155 => "1100101111100111", 
    156 => "0001010110101110", 157 => "0000111010010000", 158 => "1100010001100010", 159 => "0001000111100110", 
    160 => "0001110000000000", 161 => "0000101111110101", 162 => "0000100011010111", 163 => "1111100011101001", 
    164 => "1111110010110011", 165 => "0000000111110101", 166 => "1111101101101000", 167 => "1111000100100111", 
    168 => "1101111010000000", 169 => "0010110101000010", 170 => "0010110101001010", 171 => "0100010111010100", 
    172 => "1101111101101110", 173 => "0001111001001011", 174 => "0010000010000000", 175 => "0011000101010101", 
    176 => "0010000011010111", 177 => "0000000011101001", 178 => "0011100100101101", 179 => "0000001000000000", 
    180 => "1110011010011111", 181 => "1010111110001001", 182 => "1100011000001000", 183 => "0111001100110100", 
    184 => "1111011110010011", 185 => "0001110001001010", 186 => "1100110000101010", 187 => "1100001111111111", 
    188 => "0010111100001110", 189 => "0011000010010001", 190 => "1110100110001010", 191 => "1101001001001111", 
    192 => "1110000110101110", 193 => "0011001100110000", 194 => "1110010000011001", 195 => "1101001110101100", 
    196 => "0100100010110101", 197 => "1111101101100011", 198 => "0100001010000001", 199 => "0000111001011101", 
    200 => "1101101110110101", 201 => "0000101101101110", 202 => "1011000001011111", 203 => "1101111010111111", 
    204 => "0011100000110000", 205 => "0010000111011011", 206 => "0011100101001001", 207 => "1111110100001101", 
    208 => "1111100000011000", 209 => "0001101001100100", 210 => "1101110110011110", 211 => "0101001111001101", 
    212 => "1110011011001101", 213 => "0000100110001101", 214 => "1101000111001100", 215 => "0100000101001101", 
    216 => "1111011011011000", 217 => "1111000111010010", 218 => "1100111101010110", 219 => "1110101111011110", 
    220 => "0010111111011011", 221 => "1110110011110010", 222 => "0010001101001110", 223 => "1111100110111000", 
    224 => "0000011000010110", 225 => "1110100111001100", 226 => "0001101100100001", 227 => "0010000100010001", 
    228 => "1111011101000110", 229 => "1111001010010010", 230 => "1111000000010101", 231 => "0101001101001101", 
    232 => "0010111000011010", 233 => "1110111010010111", 234 => "0100000001010111", 235 => "0101101111001010", 
    236 => "0000111100100110", 237 => "1101011110100000", 238 => "0000001101011110", 239 => "0110001000101001", 
    240 => "0000011011011010", 241 => "1110110111011010", 242 => "1111011010111010", 243 => "1100100011101100", 
    244 => "0000100101100011", 245 => "1011110111001101", 246 => "1111001100101001", 247 => "1111000101101100", 
    248 => "1110111010011110", 249 => "1100001110001010", 250 => "0100111010001011", 251 => "0000100011000001", 
    252 => "0001011010001100", 253 => "1111100000110110", 254 => "1010111101100010", 255 => "0011101011000010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;
 
        if (ce1 = '1') then  
            q1 <= mem0(CONV_INTEGER(address1_tmp)); 
        end if;

end if;
end process;

end rtl;

