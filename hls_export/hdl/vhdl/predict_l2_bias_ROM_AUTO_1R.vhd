-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_l2_bias_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 32
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of predict_l2_bias_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1111110111000101", 1 => "1101110100000000", 2 => "1110100100001111", 3 => "0101011010010111", 
    4 => "1101111100110100", 5 => "0000100110100001", 6 => "1101111001010011", 7 => "0011111111101010", 
    8 => "0000011110100101", 9 => "1100010110110100", 10 => "1101101001001011", 11 => "1111101001101011", 
    12 => "0001110111010110", 13 => "1110010100100101", 14 => "1110010101011001", 15 => "0010011101100000", 
    16 => "1111100011111001", 17 => "1111000000101010", 18 => "1111100111101100", 19 => "0000110011111010", 
    20 => "1111000101101101", 21 => "0001100011011011", 22 => "0001011111111000", 23 => "1101010100101010", 
    24 => "1111101000101110", 25 => "1101110110010011", 26 => "0011100101001011", 27 => "1100101110000000", 
    28 => "0110000101001100", 29 => "0101011011000100", 30 => "1100100001111010", 31 => "1101110011100010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

