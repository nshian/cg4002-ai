-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity predict_predict_Pipeline_VITIS_LOOP_35_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    add_ln38_8 : IN STD_LOGIC_VECTOR (8 downto 0);
    input_layer_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_layer_ce0 : OUT STD_LOGIC;
    input_layer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_layer_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_layer_ce1 : OUT STD_LOGIC;
    input_layer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_layer_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_layer_1_ce0 : OUT STD_LOGIC;
    input_layer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_layer_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_layer_1_ce1 : OUT STD_LOGIC;
    input_layer_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_layer_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_layer_2_ce0 : OUT STD_LOGIC;
    input_layer_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_layer_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_layer_2_ce1 : OUT STD_LOGIC;
    input_layer_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_layer_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_layer_3_ce0 : OUT STD_LOGIC;
    input_layer_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_layer_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_layer_3_ce1 : OUT STD_LOGIC;
    input_layer_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln38_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln38_3_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of predict_predict_Pipeline_VITIS_LOOP_35_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_24 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln35_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_ZL10l1_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_ZL10l1_weights_0_ce0 : STD_LOGIC;
    signal p_ZL10l1_weights_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l1_weights_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_ZL10l1_weights_0_ce1 : STD_LOGIC;
    signal p_ZL10l1_weights_0_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l1_weights_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_ZL10l1_weights_1_ce0 : STD_LOGIC;
    signal p_ZL10l1_weights_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l1_weights_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_ZL10l1_weights_1_ce1 : STD_LOGIC;
    signal p_ZL10l1_weights_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l1_weights_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_ZL10l1_weights_2_ce0 : STD_LOGIC;
    signal p_ZL10l1_weights_2_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_ZL10l1_weights_2_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_ZL10l1_weights_2_ce1 : STD_LOGIC;
    signal p_ZL10l1_weights_2_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_ZL10l1_weights_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_ZL10l1_weights_3_ce0 : STD_LOGIC;
    signal p_ZL10l1_weights_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l1_weights_3_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_ZL10l1_weights_3_ce1 : STD_LOGIC;
    signal p_ZL10l1_weights_3_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lshr_ln3_fu_344_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln3_reg_799 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln35_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_844_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln38_2_fu_323_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln38_2_reg_868 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_4_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_3_fu_307_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln38_3_reg_878 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln38_4_fu_311_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln38_4_reg_883 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_ZL10l1_weights_1_load_1_reg_888 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_layer_1_load_1_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln38_4_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln35_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_6_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_8_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_2_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_10_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_3_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_1_fu_82 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln35_2_fu_468_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln38_3_fu_641_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln38_fu_362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_9_fu_366_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln35_fu_380_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln38_1_fu_386_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_fu_390_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln35_1_fu_402_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln38_5_fu_417_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_10_fu_421_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_1_fu_432_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln38_5_fu_438_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln38_7_fu_453_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_11_fu_457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1_fu_492_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln38_fu_299_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln38_fu_500_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_3_fu_516_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_1_fu_526_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln38_1_fu_303_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln38_1_fu_534_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln38_fu_580_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln38_9_fu_591_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_12_fu_595_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln38_2_fu_606_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln38_2_fu_613_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_5_fu_618_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_3_fu_628_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln38_3_fu_636_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln38_4_fu_652_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln38_4_fu_660_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_s_fu_673_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_5_fu_683_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln38_5_fu_315_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln38_5_fu_691_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_14_fu_707_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_6_fu_717_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln38_6_fu_327_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln38_6_fu_725_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_15_fu_741_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_7_fu_751_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln38_7_fu_319_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln38_7_fu_759_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component predict_mul_32s_16s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component predict_mul_32s_17s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component predict_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    p_ZL10l1_weights_0_U : component predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_0_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l1_weights_0_address0,
        ce0 => p_ZL10l1_weights_0_ce0,
        q0 => p_ZL10l1_weights_0_q0,
        address1 => p_ZL10l1_weights_0_address1,
        ce1 => p_ZL10l1_weights_0_ce1,
        q1 => p_ZL10l1_weights_0_q1);

    p_ZL10l1_weights_1_U : component predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_1_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l1_weights_1_address0,
        ce0 => p_ZL10l1_weights_1_ce0,
        q0 => p_ZL10l1_weights_1_q0,
        address1 => p_ZL10l1_weights_1_address1,
        ce1 => p_ZL10l1_weights_1_ce1,
        q1 => p_ZL10l1_weights_1_q1);

    p_ZL10l1_weights_2_U : component predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_2_ROM_AUTO_1R
    generic map (
        DataWidth => 17,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l1_weights_2_address0,
        ce0 => p_ZL10l1_weights_2_ce0,
        q0 => p_ZL10l1_weights_2_q0,
        address1 => p_ZL10l1_weights_2_address1,
        ce1 => p_ZL10l1_weights_2_ce1,
        q1 => p_ZL10l1_weights_2_q1);

    p_ZL10l1_weights_3_U : component predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_3_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l1_weights_3_address0,
        ce0 => p_ZL10l1_weights_3_ce0,
        q0 => p_ZL10l1_weights_3_q0,
        address1 => p_ZL10l1_weights_3_address1,
        ce1 => p_ZL10l1_weights_3_ce1,
        q1 => p_ZL10l1_weights_3_q1);

    mul_32s_16s_48_1_1_U12 : component predict_mul_32s_16s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => input_layer_q1,
        din1 => p_ZL10l1_weights_0_q1,
        dout => mul_ln38_fu_299_p2);

    mul_32s_16s_48_1_1_U13 : component predict_mul_32s_16s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => input_layer_1_q1,
        din1 => p_ZL10l1_weights_1_q1,
        dout => mul_ln38_1_fu_303_p2);

    mul_32s_16s_48_1_1_U14 : component predict_mul_32s_16s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => input_layer_3_q1,
        din1 => p_ZL10l1_weights_3_q1,
        dout => mul_ln38_3_fu_307_p2);

    mul_32s_16s_48_1_1_U15 : component predict_mul_32s_16s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => input_layer_q0,
        din1 => p_ZL10l1_weights_0_q0,
        dout => mul_ln38_4_fu_311_p2);

    mul_32s_16s_48_1_1_U16 : component predict_mul_32s_16s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => input_layer_1_load_1_reg_893,
        din1 => p_ZL10l1_weights_1_load_1_reg_888,
        dout => mul_ln38_5_fu_315_p2);

    mul_32s_16s_48_1_1_U17 : component predict_mul_32s_16s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => input_layer_3_q0,
        din1 => p_ZL10l1_weights_3_q0,
        dout => mul_ln38_7_fu_319_p2);

    mul_32s_17s_48_1_1_U18 : component predict_mul_32s_17s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 17,
        dout_WIDTH => 48)
    port map (
        din0 => input_layer_2_q1,
        din1 => p_ZL10l1_weights_2_q1,
        dout => mul_ln38_2_fu_323_p2);

    mul_32s_17s_48_1_1_U19 : component predict_mul_32s_17s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 17,
        dout_WIDTH => 48)
    port map (
        din0 => input_layer_2_q0,
        din1 => p_ZL10l1_weights_2_q0,
        dout => mul_ln38_6_fu_327_p2);

    flow_control_loop_pipe_sequential_init_U : component predict_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    empty_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_fu_78 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln35_reg_844_pp0_iter1_reg = ap_const_lv1_1))) then 
                    empty_fu_78 <= add_ln38_7_fu_759_p2(47 downto 16);
                end if;
            end if; 
        end if;
    end process;

    i_1_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln35_fu_396_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_82 <= add_ln35_2_fu_468_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_82 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln35_reg_844 <= icmp_ln35_fu_396_p2;
                icmp_ln35_reg_844_pp0_iter1_reg <= icmp_ln35_reg_844;
                lshr_ln3_reg_799 <= ap_sig_allocacmp_i(5 downto 2);
                mul_ln38_2_reg_868 <= mul_ln38_2_fu_323_p2;
                mul_ln38_3_reg_878 <= mul_ln38_3_fu_307_p2;
                mul_ln38_4_reg_883 <= mul_ln38_4_fu_311_p2;
                tmp_4_reg_873 <= add_ln38_1_fu_534_p2(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                input_layer_1_load_1_reg_893 <= input_layer_1_q0;
                p_ZL10l1_weights_1_load_1_reg_888 <= p_ZL10l1_weights_1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln35_1_fu_432_p2 <= std_logic_vector(unsigned(zext_ln38_1_fu_386_p1) + unsigned(ap_const_lv7_3));
    add_ln35_2_fu_468_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv6_8));
    add_ln35_fu_390_p2 <= std_logic_vector(unsigned(zext_ln38_1_fu_386_p1) + unsigned(ap_const_lv7_2));
    add_ln38_10_fu_421_p2 <= std_logic_vector(unsigned(add_ln38_8) + unsigned(zext_ln38_5_fu_417_p1));
    add_ln38_11_fu_457_p2 <= std_logic_vector(unsigned(add_ln38_8) + unsigned(zext_ln38_7_fu_453_p1));
    add_ln38_12_fu_595_p2 <= std_logic_vector(unsigned(add_ln38_8) + unsigned(zext_ln38_9_fu_591_p1));
    add_ln38_1_fu_534_p2 <= std_logic_vector(unsigned(shl_ln38_1_fu_526_p3) + unsigned(mul_ln38_1_fu_303_p2));
    add_ln38_2_fu_613_p2 <= std_logic_vector(unsigned(shl_ln38_2_fu_606_p3) + unsigned(mul_ln38_2_reg_868));
    add_ln38_3_fu_636_p2 <= std_logic_vector(unsigned(shl_ln38_3_fu_628_p3) + unsigned(mul_ln38_3_reg_878));
    add_ln38_4_fu_660_p2 <= std_logic_vector(unsigned(shl_ln38_4_fu_652_p3) + unsigned(mul_ln38_4_reg_883));
    add_ln38_5_fu_691_p2 <= std_logic_vector(unsigned(shl_ln38_5_fu_683_p3) + unsigned(mul_ln38_5_fu_315_p2));
    add_ln38_6_fu_725_p2 <= std_logic_vector(unsigned(shl_ln38_6_fu_717_p3) + unsigned(mul_ln38_6_fu_327_p2));
    add_ln38_7_fu_759_p2 <= std_logic_vector(unsigned(shl_ln38_7_fu_751_p3) + unsigned(mul_ln38_7_fu_319_p2));
    add_ln38_9_fu_366_p2 <= std_logic_vector(unsigned(add_ln38_8) + unsigned(zext_ln38_fu_362_p1));
    add_ln38_fu_500_p2 <= std_logic_vector(unsigned(shl_ln1_fu_492_p3) + unsigned(mul_ln38_fu_299_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln35_fu_396_p2)
    begin
        if (((icmp_ln35_fu_396_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln35_reg_844_pp0_iter1_reg, ap_block_pp0_stage0, empty_fu_78, add_ln38_7_fu_759_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln35_reg_844_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_sig_allocacmp_p_load <= add_ln38_7_fu_759_p2(47 downto 16);
        else 
            ap_sig_allocacmp_p_load <= empty_fu_78;
        end if; 
    end process;

    icmp_ln35_fu_396_p2 <= "1" when (unsigned(add_ln35_fu_390_p2) < unsigned(ap_const_lv7_24)) else "0";
    input_layer_1_address0 <= zext_ln38_2_fu_448_p1(4 - 1 downto 0);
    input_layer_1_address1 <= zext_ln35_fu_354_p1(4 - 1 downto 0);

    input_layer_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_layer_1_ce0 <= ap_const_logic_1;
        else 
            input_layer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_layer_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_layer_1_ce1 <= ap_const_logic_1;
        else 
            input_layer_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_layer_2_address0 <= zext_ln38_3_fu_585_p1(4 - 1 downto 0);
    input_layer_2_address1 <= zext_ln35_fu_354_p1(4 - 1 downto 0);

    input_layer_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_layer_2_ce0 <= ap_const_logic_1;
        else 
            input_layer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_layer_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_layer_2_ce1 <= ap_const_logic_1;
        else 
            input_layer_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_layer_3_address0 <= zext_ln38_3_fu_585_p1(4 - 1 downto 0);
    input_layer_3_address1 <= zext_ln35_fu_354_p1(4 - 1 downto 0);

    input_layer_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_layer_3_ce0 <= ap_const_logic_1;
        else 
            input_layer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_layer_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_layer_3_ce1 <= ap_const_logic_1;
        else 
            input_layer_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_layer_address0 <= zext_ln35_1_fu_412_p1(4 - 1 downto 0);
    input_layer_address1 <= zext_ln35_fu_354_p1(4 - 1 downto 0);

    input_layer_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_layer_ce0 <= ap_const_logic_1;
        else 
            input_layer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_layer_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_layer_ce1 <= ap_const_logic_1;
        else 
            input_layer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln35_1_fu_402_p4 <= add_ln35_fu_390_p2(6 downto 2);
    lshr_ln38_5_fu_438_p4 <= add_ln35_1_fu_432_p2(6 downto 2);
    lshr_ln3_fu_344_p4 <= ap_sig_allocacmp_i(5 downto 2);
    or_ln35_fu_380_p2 <= (ap_sig_allocacmp_i or ap_const_lv6_2);
    or_ln38_fu_580_p2 <= (lshr_ln3_reg_799 or ap_const_lv4_1);
    p_ZL10l1_weights_0_address0 <= zext_ln38_6_fu_427_p1(9 - 1 downto 0);
    p_ZL10l1_weights_0_address1 <= zext_ln38_4_fu_372_p1(9 - 1 downto 0);

    p_ZL10l1_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l1_weights_0_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l1_weights_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l1_weights_0_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l1_weights_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZL10l1_weights_1_address0 <= zext_ln38_8_fu_463_p1(9 - 1 downto 0);
    p_ZL10l1_weights_1_address1 <= zext_ln38_4_fu_372_p1(9 - 1 downto 0);

    p_ZL10l1_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l1_weights_1_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l1_weights_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l1_weights_1_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l1_weights_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZL10l1_weights_2_address0 <= zext_ln38_10_fu_600_p1(9 - 1 downto 0);
    p_ZL10l1_weights_2_address1 <= zext_ln38_4_fu_372_p1(9 - 1 downto 0);

    p_ZL10l1_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l1_weights_2_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l1_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l1_weights_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l1_weights_2_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l1_weights_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZL10l1_weights_3_address0 <= zext_ln38_10_fu_600_p1(9 - 1 downto 0);
    p_ZL10l1_weights_3_address1 <= zext_ln38_4_fu_372_p1(9 - 1 downto 0);

    p_ZL10l1_weights_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l1_weights_3_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l1_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l1_weights_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l1_weights_3_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l1_weights_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1_fu_492_p3 <= (ap_sig_allocacmp_p_load & ap_const_lv16_0);
    shl_ln38_1_fu_526_p3 <= (tmp_3_fu_516_p4 & ap_const_lv16_0);
    shl_ln38_2_fu_606_p3 <= (tmp_4_reg_873 & ap_const_lv16_0);
    shl_ln38_3_fu_628_p3 <= (tmp_5_fu_618_p4 & ap_const_lv16_0);
    shl_ln38_4_fu_652_p3 <= (trunc_ln38_3_fu_641_p4 & ap_const_lv16_0);
    shl_ln38_5_fu_683_p3 <= (tmp_s_fu_673_p4 & ap_const_lv16_0);
    shl_ln38_6_fu_717_p3 <= (tmp_14_fu_707_p4 & ap_const_lv16_0);
    shl_ln38_7_fu_751_p3 <= (tmp_15_fu_741_p4 & ap_const_lv16_0);
    tmp_14_fu_707_p4 <= add_ln38_5_fu_691_p2(47 downto 16);
    tmp_15_fu_741_p4 <= add_ln38_6_fu_725_p2(47 downto 16);
    tmp_3_fu_516_p4 <= add_ln38_fu_500_p2(47 downto 16);
    tmp_5_fu_618_p4 <= add_ln38_2_fu_613_p2(47 downto 16);
    tmp_s_fu_673_p4 <= add_ln38_4_fu_660_p2(47 downto 16);
    trunc_ln38_3_fu_641_p4 <= add_ln38_3_fu_636_p2(47 downto 16);
    trunc_ln38_3_out <= add_ln38_3_fu_636_p2(47 downto 16);

    trunc_ln38_3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln35_reg_844_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln35_reg_844_pp0_iter1_reg = ap_const_lv1_0))) then 
            trunc_ln38_3_out_ap_vld <= ap_const_logic_1;
        else 
            trunc_ln38_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln35_1_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln35_1_fu_402_p4),64));
    zext_ln35_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_344_p4),64));
    zext_ln38_10_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_12_fu_595_p2),64));
    zext_ln38_1_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln35_fu_380_p2),7));
    zext_ln38_2_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln38_5_fu_438_p4),64));
    zext_ln38_3_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln38_fu_580_p2),64));
    zext_ln38_4_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_9_fu_366_p2),64));
    zext_ln38_5_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln35_1_fu_402_p4),9));
    zext_ln38_6_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_10_fu_421_p2),64));
    zext_ln38_7_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln38_5_fu_438_p4),9));
    zext_ln38_8_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_11_fu_457_p2),64));
    zext_ln38_9_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln38_fu_580_p2),9));
    zext_ln38_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_344_p4),9));
end behav;
