-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_3_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 17; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 256
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);
 
          address1        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1             : in std_logic; 
          q1              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_3_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "11101101111010011", 1 => "00001010101111100", 2 => "11101101101100010", 3 => "11101011100001010", 
    4 => "00100001011001011", 5 => "00001000000101100", 6 => "11110111000111011", 7 => "00001101000111001", 
    8 => "11101001011101100", 9 => "11010100110001100", 10 => "00011101100110010", 11 => "00000111111100101", 
    12 => "00000111001010101", 13 => "00100001111010010", 14 => "11111001111111011", 15 => "11110101110111001", 
    16 => "11010100111010101", 17 => "11111110110000111", 18 => "11110100100101100", 19 => "11101100000110010", 
    20 => "00100010000101000", 21 => "00011011001111111", 22 => "00010111010111100", 23 => "11111111110001000", 
    24 => "00010101000011000", 25 => "00001000111001101", 26 => "00000101011001110", 27 => "00100000011000111", 
    28 => "00000101100110111", 29 => "00001000100000000", 30 => "11111100000111110", 31 => "00011100110001000", 
    32 => "00000110111000011", 33 => "00011011010110100", 34 => "00000011001000011", 35 => "00110010111010111", 
    36 => "11110100110111001", 37 => "00000001010110111", 38 => "11101111010100110", 39 => "00000101111111011", 
    40 => "11101101111101000", 41 => "11011010100001001", 42 => "11111101111111011", 43 => "00000111110011100", 
    44 => "00011000001010111", 45 => "00000101100111100", 46 => "00011100111011011", 47 => "00000000010101001", 
    48 => "11111110111001100", 49 => "11100001000110010", 50 => "00000110010010101", 51 => "11110011001111101", 
    52 => "00010001111001011", 53 => "11111110100110011", 54 => "00000001000010101", 55 => "11111101011001001", 
    56 => "00011111001000110", 57 => "00100000011011000", 58 => "00001000110001110", 59 => "00000010000100111", 
    60 => "11100101000011000", 61 => "11111111000101110", 62 => "11111100001101110", 63 => "00001111101111010", 
    64 => "00001010001101011", 65 => "01000100001111011", 66 => "11101100011011111", 67 => "11111101110101011", 
    68 => "11100110101001001", 69 => "11110011100101000", 70 => "00000101001011101", 71 => "00001100100000011", 
    72 => "00000001010010001", 73 => "11110111100111110", 74 => "11110001101100101", 75 => "00001100101101100", 
    76 => "11111010000111011", 77 => "11101011110101101", 78 => "00010101001111100", 79 => "11110010011101100", 
    80 => "11110100001101100", 81 => "00010110010100101", 82 => "00010101111001010", 83 => "11100100101111101", 
    84 => "00100111111000110", 85 => "00010011100110110", 86 => "00010101010001110", 87 => "11101010001000100", 
    88 => "11011110010010001", 89 => "00000110101011011", 90 => "00000011111000100", 91 => "11110110011011010", 
    92 => "00010100000010011", 93 => "00000111111101011", 94 => "11110001001011111", 95 => "11111111100100111", 
    96 => "11111001001011111", 97 => "11111001000001100", 98 => "11111100101101010", 99 => "11110001101100101", 
    100 => "00010010010000100", 101 => "00100111000010010", 102 => "11101010110001011", 103 => "00001010001000100", 
    104 => "11101011011100000", 105 => "00000000101010110", 106 => "00010000001010001", 107 => "11100101011100010", 
    108 => "00000111011101111", 109 => "00010010110011100", 110 => "11100011000001011", 111 => "11101011010101100", 
    112 => "11011111001101011", 113 => "00000000110110011", 114 => "00000010011000101", 115 => "11101011010001100", 
    116 => "00000001111101010", 117 => "11111001101011100", 118 => "11111110001010001", 119 => "11111111101110101", 
    120 => "00101001001010001", 121 => "00100010111000011", 122 => "00000110001100111", 123 => "11111001010000101", 
    124 => "00000111000110010", 125 => "11110110000001110", 126 => "00000001010100111", 127 => "11111011001000001", 
    128 => "00000001011101111", 129 => "00001001110110101", 130 => "11110101101111001", 131 => "00100000110100110", 
    132 => "11011111111011100", 133 => "11101110001010111", 134 => "11100101100011011", 135 => "11111000001110110", 
    136 => "00000011110010110", 137 => "11111101100011100", 138 => "00010110101010101", 139 => "11110111000000111", 
    140 => "00100001101001100", 141 => "00100101000001100", 142 => "11110101110010111", 143 => "00001110101111000", 
    144 => "00001010011001110", 145 => "11110011011111110", 146 => "11111001101001110", 147 => "00010011111010110", 
    148 => "00000111011011110", 149 => "00010100011101100", 150 => "00010011110110110", 151 => "11110010101101010", 
    152 => "11111010110101011", 153 => "11110101000010001", 154 => "00000100100011110", 155 => "11111110011110010", 
    156 => "11101010001110101", 157 => "00001101110100100", 158 => "00001100010111101", 159 => "11111110111111011", 
    160 => "11011101011110011", 161 => "00000100101010111", 162 => "11110111100110000", 163 => "11111100001000111", 
    164 => "11100110100101100", 165 => "11110110001100000", 166 => "11101010001111110", 167 => "00011001111111100", 
    168 => "00100001000110011", 169 => "00111001111100111", 170 => "00000010000110101", 171 => "00010000101100110", 
    172 => "11111111010011110", 173 => "00000011101011001", 174 => "00010001111000010", 175 => "11111010001100110", 
    176 => "01000111100100101", 177 => "00010010101101001", 178 => "11110001110101100", 179 => "00001100000001110", 
    180 => "11111001111111010", 181 => "11110111100110101", 182 => "00000100000111110", 183 => "11110010011000000", 
    184 => "11100101101010010", 185 => "11111011111111110", 186 => "00000001110111110", 187 => "11110010001001101", 
    188 => "00010001100111110", 189 => "00001100100101110", 190 => "11110101011101100", 191 => "11110111001101010", 
    192 => "11111110001100010", 193 => "11110111111010101", 194 => "11111011101100001", 195 => "00001000111001010", 
    196 => "00001100010010101", 197 => "00011100100111111", 198 => "00010010011101011", 199 => "00000010110011101", 
    200 => "11110011000101000", 201 => "00010000100010000", 202 => "11101100101101010", 203 => "11111110010100110", 
    204 => "11111111110000000", 205 => "00010111101000010", 206 => "11110010011110011", 207 => "11100010111100100", 
    208 => "00101110001010011", 209 => "00011000011111011", 210 => "11101111100011001", 211 => "00010111100101001", 
    212 => "11101101101011010", 213 => "00000000111011011", 214 => "11101111101110010", 215 => "00011101000000110", 
    216 => "11111110100000110", 217 => "11111101011001110", 218 => "11110001001111000", 219 => "11111010000010000", 
    220 => "00000010011001011", 221 => "00011001100000100", 222 => "00000010001011110", 223 => "00000110101101011", 
    224 => "00010011110001000", 225 => "00000110011011100", 226 => "11110100111110101", 227 => "11110111011110010", 
    228 => "11101000000111111", 229 => "11110011100110001", 230 => "00001011101010100", 231 => "00000111000110011", 
    232 => "00110101001111111", 233 => "00010011010100010", 234 => "00001101001100111", 235 => "11111101000100000", 
    236 => "11110011100010001", 237 => "11110111111111000", 238 => "11110000011010000", 239 => "00010101110010111", 
    240 => "11100111011001101", 241 => "11011000110010100", 242 => "00010000000111001", 243 => "11101101110111011", 
    244 => "11111011100100010", 245 => "11101101000110010", 246 => "11110001101011010", 247 => "11111110100011100", 
    248 => "01000111111011111", 249 => "00000000001011000", 250 => "00001101111000010", 251 => "00110110111001111", 
    252 => "11101000100101001", 253 => "11111111001010101", 254 => "11111010100001011", 255 => "00011001111000101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;
 
        if (ce1 = '1') then  
            q1 <= mem0(CONV_INTEGER(address1_tmp)); 
        end if;

end if;
end process;

end rtl;

