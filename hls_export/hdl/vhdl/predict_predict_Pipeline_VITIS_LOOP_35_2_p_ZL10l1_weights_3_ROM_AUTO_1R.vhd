-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_3_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 288
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);
 
          address1        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1             : in std_logic; 
          q1              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_3_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0001100001111010", 1 => "0011101000001001", 2 => "1100010111011001", 3 => "0100000000011111", 
    4 => "0000000101001110", 5 => "0000101000001110", 6 => "0011010100111110", 7 => "1101100111011110", 
    8 => "0001010110001000", 9 => "1110010010101100", 10 => "1111110010110010", 11 => "0011101111010001", 
    12 => "1110100000000011", 13 => "0001010001111000", 14 => "1110101010111010", 15 => "1110010110100011", 
    16 => "1110011001001110", 17 => "0001010010001011", 18 => "1110100010110101", 19 => "0001011010010001", 
    20 => "1101110100000110", 21 => "1110101101000011", 22 => "1110000101111111", 23 => "1101011011100010", 
    24 => "1110010011000000", 25 => "1100110110011001", 26 => "1101011001011011", 27 => "0000010010010001", 
    28 => "1110011110000100", 29 => "0100000001111110", 30 => "1011100000101101", 31 => "1111001010111100", 
    32 => "0010110000111100", 33 => "1100111110010001", 34 => "1111010101010110", 35 => "1110110111100110", 
    36 => "0011111010111100", 37 => "1100101101000101", 38 => "1111001111011000", 39 => "1101110101010000", 
    40 => "1101010011011010", 41 => "0010000100100111", 42 => "1101111100111010", 43 => "1110000001110100", 
    44 => "1100010010001101", 45 => "1111011000001010", 46 => "1110000001101011", 47 => "0100101011000101", 
    48 => "1100001110011000", 49 => "0001110101101011", 50 => "0010110010110100", 51 => "1011101100111000", 
    52 => "0001000110011100", 53 => "0011100010000100", 54 => "1110111110011110", 55 => "0001110010111111", 
    56 => "1110100110111111", 57 => "0101101010000011", 58 => "0000101011011011", 59 => "1101010110111001", 
    60 => "0010001101011110", 61 => "0001010111011101", 62 => "1110100010000001", 63 => "0000101101111011", 
    64 => "0000000001110000", 65 => "1101111001100101", 66 => "1101111110010011", 67 => "1011110000010111", 
    68 => "1101110101100001", 69 => "1110110111111111", 70 => "1101011000101001", 71 => "0000110111110110", 
    72 => "0000001001011110", 73 => "1110100000100111", 74 => "0001011000101001", 75 => "0000101110111001", 
    76 => "0001010001010110", 77 => "0010001101010101", 78 => "0000111111011111", 79 => "0001000010000101", 
    80 => "0010000101010111", 81 => "1110001111010111", 82 => "0011011100100101", 83 => "1001001111101000", 
    84 => "0010000101000011", 85 => "1101111100101111", 86 => "1110001010000111", 87 => "0011010111111010", 
    88 => "0001011001000010", 89 => "0011001000011101", 90 => "0000101000000010", 91 => "1011000001010010", 
    92 => "0011000001001101", 93 => "1101101111011101", 94 => "1100101110001110", 95 => "0001011011001001", 
    96 => "1101100110000010", 97 => "1100110001101000", 98 => "1100011011000101", 99 => "1111101110101100", 
    100 => "1111001010001101", 101 => "1101110000111011", 102 => "1111111010101110", 103 => "1101101111111000", 
    104 => "1101010010111100", 105 => "0000100111101111", 106 => "1100100100011010", 107 => "1110101100111011", 
    108 => "0000101101100011", 109 => "1111100111010000", 110 => "0110111101101000", 111 => "0000111000000110", 
    112 => "1110001011011000", 113 => "0001111101111101", 114 => "1100001101010000", 115 => "1110111100101110", 
    116 => "1111011111010101", 117 => "0001000110010111", 118 => "1110011000000000", 119 => "0011111110110011", 
    120 => "1111001111000011", 121 => "1111001100101110", 122 => "0000111001010000", 123 => "1101100100001110", 
    124 => "1110010010110100", 125 => "0001011010101110", 126 => "1101100010100100", 127 => "1010100010001000", 
    128 => "0010001011111100", 129 => "1011110010100101", 130 => "0001100110110100", 131 => "0000111001001011", 
    132 => "1101001011010001", 133 => "1111110110101111", 134 => "0010100001100011", 135 => "0011001100000101", 
    136 => "0001100100111000", 137 => "0001101100100001", 138 => "1011111101110101", 139 => "0010001110101111", 
    140 => "1101010011110000", 141 => "1110111111101010", 142 => "1101001110110011", 143 => "1110111111100010", 
    144 => "1110010100101111", 145 => "0100110100000101", 146 => "1100011111100101", 147 => "0101011000110001", 
    148 => "1110011100001111", 149 => "0000001110110111", 150 => "0001101101011101", 151 => "0000111001001101", 
    152 => "1111010000000001", 153 => "0001000010000001", 154 => "0001100110110010", 155 => "1101100011000010", 
    156 => "0000000111111101", 157 => "1101101111001101", 158 => "1101111100011011", 159 => "0000010110011011", 
    160 => "0000101101100101", 161 => "1110011111011100", 162 => "1101010100010110", 163 => "0011110111001110", 
    164 => "1110000010001010", 165 => "0101100010111101", 166 => "1111011010000101", 167 => "0000001100100000", 
    168 => "0101011001101101", 169 => "1111011001110101", 170 => "0000010101100110", 171 => "0000110100010110", 
    172 => "0100110010010010", 173 => "1110101010010011", 174 => "0100111010110001", 175 => "1101110000111001", 
    176 => "0000011011000000", 177 => "0011110000100100", 178 => "0010001000101010", 179 => "1110110111000011", 
    180 => "0000010111111101", 181 => "1111111010100111", 182 => "1000110001101011", 183 => "0110010111101001", 
    184 => "0001010100010110", 185 => "0000111100000000", 186 => "0001010101010011", 187 => "0001100100000101", 
    188 => "1110011101111010", 189 => "0001101000010000", 190 => "1101010011010010", 191 => "1100100010101010", 
    192 => "0010000001111101", 193 => "1110100011010010", 194 => "1110101100111001", 195 => "0000000010110111", 
    196 => "1111101011001101", 197 => "0000110101110101", 198 => "1001101011110001", 199 => "0011100110101111", 
    200 => "1110011000110000", 201 => "0011000010110110", 202 => "0000100010000001", 203 => "1111000100011011", 
    204 => "0100011000001010", 205 => "1110010110010101", 206 => "1101111000111110", 207 => "0010001110110011", 
    208 => "0011110000111000", 209 => "1010001100100000", 210 => "0000000011000101", 211 => "1111001011110001", 
    212 => "1101111101011110", 213 => "0100001101100010", 214 => "0011000001000100", 215 => "1110101001100001", 
    216 => "1101011011011111", 217 => "0100111100100111", 218 => "1001111110001101", 219 => "0100001000001001", 
    220 => "0001110111111101", 221 => "1110110100011110", 222 => "0010001101011111", 223 => "0001110101110100", 
    224 => "1111100011000011", 225 => "0001000000111010", 226 => "0010010010001101", 227 => "1101111010010111", 
    228 => "0001001111001110", 229 => "1101000000111111", 230 => "1101001101101001", 231 => "0011010000001100", 
    232 => "0000011000111110", 233 => "1111001011110111", 234 => "0000111111110011", 235 => "0001110011100011", 
    236 => "1010111011011011", 237 => "0010001000100010", 238 => "1101110101011111", 239 => "0000001111100110", 
    240 => "0010000101100001", 241 => "0000101101111011", 242 => "0001110011100001", 243 => "0000010000101010", 
    244 => "0001101011101001", 245 => "0001010001010110", 246 => "1111111011101011", 247 => "0000001110011110", 
    248 => "1101101011011100", 249 => "1110101011000000", 250 => "1111101001100011", 251 => "1110000000110010", 
    252 => "1101000111110000", 253 => "0001101111100101", 254 => "1111100111111101", 255 => "0000101001011010", 
    256 => "1110010001101010", 257 => "1110011011001010", 258 => "0100010100100010", 259 => "1110100000011111", 
    260 => "1111100001111111", 261 => "0000110111011111", 262 => "1101011000000010", 263 => "0100110010010101", 
    264 => "1100001010010101", 265 => "0010011011010010", 266 => "0010000110101101", 267 => "1111010011110011", 
    268 => "0001100111110000", 269 => "1111111100101100", 270 => "1111000010101011", 271 => "1111110010100111", 
    272 => "0110101111000001", 273 => "1011100100110001", 274 => "0010100011001101", 275 => "0100000110100001", 
    276 => "1100100111011011", 277 => "1101110100110100", 278 => "0001101010110011", 279 => "0001111001101111", 
    280 => "1101011110011000", 281 => "0001101100101001", 282 => "0001100110101010", 283 => "1101111101000011", 
    284 => "1101001001110000", 285 => "1110101110010110", 286 => "1100100110001111", 287 => "0001001001111011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;
 
        if (ce1 = '1') then  
            q1 <= mem0(CONV_INTEGER(address1_tmp)); 
        end if;

end if;
end process;

end rtl;

