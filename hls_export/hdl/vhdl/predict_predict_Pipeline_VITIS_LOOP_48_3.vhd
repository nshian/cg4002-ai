-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity predict_predict_Pipeline_VITIS_LOOP_48_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    j_1 : IN STD_LOGIC_VECTOR (4 downto 0);
    hidden_layer1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer1_ce0 : OUT STD_LOGIC;
    hidden_layer1_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer1_ce1 : OUT STD_LOGIC;
    hidden_layer1_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer1_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer1_1_ce0 : OUT STD_LOGIC;
    hidden_layer1_1_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer1_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer1_1_ce1 : OUT STD_LOGIC;
    hidden_layer1_1_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer1_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer1_2_ce0 : OUT STD_LOGIC;
    hidden_layer1_2_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer1_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer1_2_ce1 : OUT STD_LOGIC;
    hidden_layer1_2_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer1_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer1_3_ce0 : OUT STD_LOGIC;
    hidden_layer1_3_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    hidden_layer1_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hidden_layer1_3_ce1 : OUT STD_LOGIC;
    hidden_layer1_3_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    zext_ln51 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of predict_predict_Pipeline_VITIS_LOOP_48_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_ZL10l2_weights_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_ZL10l2_weights_0_ce0 : STD_LOGIC;
    signal p_ZL10l2_weights_0_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_ZL10l2_weights_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_ZL10l2_weights_0_ce1 : STD_LOGIC;
    signal p_ZL10l2_weights_0_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_ZL10l2_weights_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_ZL10l2_weights_1_ce0 : STD_LOGIC;
    signal p_ZL10l2_weights_1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_ZL10l2_weights_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_ZL10l2_weights_1_ce1 : STD_LOGIC;
    signal p_ZL10l2_weights_1_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_ZL10l2_weights_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_ZL10l2_weights_2_ce0 : STD_LOGIC;
    signal p_ZL10l2_weights_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l2_weights_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_ZL10l2_weights_2_ce1 : STD_LOGIC;
    signal p_ZL10l2_weights_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ZL10l2_weights_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_ZL10l2_weights_3_ce0 : STD_LOGIC;
    signal p_ZL10l2_weights_3_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_ZL10l2_weights_3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_ZL10l2_weights_3_ce1 : STD_LOGIC;
    signal p_ZL10l2_weights_3_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln5_fu_368_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln5_reg_829 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln51_2_fu_311_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln51_2_reg_894 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_7_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln51_3_fu_327_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_3_reg_904 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_4_fu_331_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_4_reg_909 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_ZL10l2_weights_1_load_1_reg_914 : STD_LOGIC_VECTOR (16 downto 0);
    signal hidden_layer1_1_load_1_reg_919 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln51_1_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln48_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_16_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_7_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_18_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_9_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_12_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_11_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_p_load12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_88 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln48_2_fu_484_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln51_2_fu_311_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln51_6_fu_315_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln51_fu_319_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln51_1_fu_323_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln51_3_fu_327_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln51_4_fu_331_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln51_5_fu_335_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln51_7_fu_339_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_386_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_fu_364_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln48_fu_402_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln51_4_fu_408_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln48_fu_412_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln51_4_fu_418_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln51_15_fu_433_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_8_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln48_1_fu_448_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln51_6_fu_454_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln51_17_fu_469_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_9_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln3_fu_508_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_fu_319_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln51_fu_516_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_6_fu_532_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln51_1_fu_542_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_1_fu_323_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln51_1_fu_550_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln51_fu_596_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_607_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln51_2_fu_620_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln51_3_fu_627_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln51_2_fu_630_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_8_fu_636_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln51_3_fu_646_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln51_3_fu_654_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_9_fu_659_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln51_4_fu_669_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln51_4_fu_677_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_10_fu_690_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln51_5_fu_700_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_5_fu_335_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln51_5_fu_708_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_12_fu_724_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln51_6_fu_315_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal shl_ln51_6_fu_734_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln51_8_fu_742_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln51_6_fu_746_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_13_fu_762_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln51_7_fu_772_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_7_fu_339_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln51_7_fu_780_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln51_1_fu_323_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_2_fu_311_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln51_3_fu_327_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_4_fu_331_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_5_fu_335_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_6_fu_315_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln51_7_fu_339_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln51_fu_319_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component predict_mul_31ns_16s_47_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component predict_mul_31ns_17s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component predict_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    p_ZL10l2_weights_0_U : component predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_0_ROM_AUTO_1R
    generic map (
        DataWidth => 17,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l2_weights_0_address0,
        ce0 => p_ZL10l2_weights_0_ce0,
        q0 => p_ZL10l2_weights_0_q0,
        address1 => p_ZL10l2_weights_0_address1,
        ce1 => p_ZL10l2_weights_0_ce1,
        q1 => p_ZL10l2_weights_0_q1);

    p_ZL10l2_weights_1_U : component predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_1_ROM_AUTO_1R
    generic map (
        DataWidth => 17,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l2_weights_1_address0,
        ce0 => p_ZL10l2_weights_1_ce0,
        q0 => p_ZL10l2_weights_1_q0,
        address1 => p_ZL10l2_weights_1_address1,
        ce1 => p_ZL10l2_weights_1_ce1,
        q1 => p_ZL10l2_weights_1_q1);

    p_ZL10l2_weights_2_U : component predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_2_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l2_weights_2_address0,
        ce0 => p_ZL10l2_weights_2_ce0,
        q0 => p_ZL10l2_weights_2_q0,
        address1 => p_ZL10l2_weights_2_address1,
        ce1 => p_ZL10l2_weights_2_ce1,
        q1 => p_ZL10l2_weights_2_q1);

    p_ZL10l2_weights_3_U : component predict_predict_Pipeline_VITIS_LOOP_48_3_p_ZL10l2_weights_3_ROM_AUTO_1R
    generic map (
        DataWidth => 17,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZL10l2_weights_3_address0,
        ce0 => p_ZL10l2_weights_3_ce0,
        q0 => p_ZL10l2_weights_3_q0,
        address1 => p_ZL10l2_weights_3_address1,
        ce1 => p_ZL10l2_weights_3_ce1,
        q1 => p_ZL10l2_weights_3_q1);

    mul_31ns_16s_47_1_1_U32 : component predict_mul_31ns_16s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 16,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln51_2_fu_311_p0,
        din1 => p_ZL10l2_weights_2_q1,
        dout => mul_ln51_2_fu_311_p2);

    mul_31ns_16s_47_1_1_U33 : component predict_mul_31ns_16s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 16,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln51_6_fu_315_p0,
        din1 => p_ZL10l2_weights_2_q0,
        dout => mul_ln51_6_fu_315_p2);

    mul_31ns_17s_48_1_1_U34 : component predict_mul_31ns_17s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 17,
        dout_WIDTH => 48)
    port map (
        din0 => mul_ln51_fu_319_p0,
        din1 => p_ZL10l2_weights_0_q1,
        dout => mul_ln51_fu_319_p2);

    mul_31ns_17s_48_1_1_U35 : component predict_mul_31ns_17s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 17,
        dout_WIDTH => 48)
    port map (
        din0 => mul_ln51_1_fu_323_p0,
        din1 => p_ZL10l2_weights_1_q1,
        dout => mul_ln51_1_fu_323_p2);

    mul_31ns_17s_48_1_1_U36 : component predict_mul_31ns_17s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 17,
        dout_WIDTH => 48)
    port map (
        din0 => mul_ln51_3_fu_327_p0,
        din1 => p_ZL10l2_weights_3_q1,
        dout => mul_ln51_3_fu_327_p2);

    mul_31ns_17s_48_1_1_U37 : component predict_mul_31ns_17s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 17,
        dout_WIDTH => 48)
    port map (
        din0 => mul_ln51_4_fu_331_p0,
        din1 => p_ZL10l2_weights_0_q0,
        dout => mul_ln51_4_fu_331_p2);

    mul_31ns_17s_48_1_1_U38 : component predict_mul_31ns_17s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 17,
        dout_WIDTH => 48)
    port map (
        din0 => mul_ln51_5_fu_335_p0,
        din1 => p_ZL10l2_weights_1_load_1_reg_914,
        dout => mul_ln51_5_fu_335_p2);

    mul_31ns_17s_48_1_1_U39 : component predict_mul_31ns_17s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 17,
        dout_WIDTH => 48)
    port map (
        din0 => mul_ln51_7_fu_339_p0,
        din1 => p_ZL10l2_weights_3_q0,
        dout => mul_ln51_7_fu_339_p2);

    flow_control_loop_pipe_sequential_init_U : component predict_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_fu_84 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    empty_fu_84 <= add_ln51_7_fu_780_p2(47 downto 16);
                end if;
            end if; 
        end if;
    end process;

    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_fu_356_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_88 <= add_ln48_2_fu_484_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                lshr_ln5_reg_829 <= ap_sig_allocacmp_i_1(4 downto 2);
                mul_ln51_2_reg_894 <= mul_ln51_2_fu_311_p2;
                mul_ln51_3_reg_904 <= mul_ln51_3_fu_327_p2;
                mul_ln51_4_reg_909 <= mul_ln51_4_fu_331_p2;
                tmp_7_reg_899 <= add_ln51_1_fu_550_p2(47 downto 16);
                tmp_reg_825 <= ap_sig_allocacmp_i_1(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                hidden_layer1_1_load_1_reg_919 <= hidden_layer1_1_q0;
                p_ZL10l2_weights_1_load_1_reg_914 <= p_ZL10l2_weights_1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln48_1_fu_448_p2 <= std_logic_vector(unsigned(zext_ln51_4_fu_408_p1) + unsigned(ap_const_lv6_3));
    add_ln48_2_fu_484_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv6_8));
    add_ln48_fu_412_p2 <= std_logic_vector(unsigned(zext_ln51_4_fu_408_p1) + unsigned(ap_const_lv6_2));
    add_ln51_1_fu_550_p2 <= std_logic_vector(unsigned(shl_ln51_1_fu_542_p3) + unsigned(mul_ln51_1_fu_323_p2));
    add_ln51_2_fu_630_p2 <= std_logic_vector(unsigned(shl_ln51_2_fu_620_p3) + unsigned(sext_ln51_3_fu_627_p1));
    add_ln51_3_fu_654_p2 <= std_logic_vector(unsigned(shl_ln51_3_fu_646_p3) + unsigned(mul_ln51_3_reg_904));
    add_ln51_4_fu_677_p2 <= std_logic_vector(unsigned(shl_ln51_4_fu_669_p3) + unsigned(mul_ln51_4_reg_909));
    add_ln51_5_fu_708_p2 <= std_logic_vector(unsigned(shl_ln51_5_fu_700_p3) + unsigned(mul_ln51_5_fu_335_p2));
    add_ln51_6_fu_746_p2 <= std_logic_vector(unsigned(shl_ln51_6_fu_734_p3) + unsigned(sext_ln51_8_fu_742_p1));
    add_ln51_7_fu_780_p2 <= std_logic_vector(unsigned(shl_ln51_7_fu_772_p3) + unsigned(mul_ln51_7_fu_339_p2));
    add_ln51_8_fu_437_p2 <= std_logic_vector(unsigned(zext_ln51) + unsigned(zext_ln51_15_fu_433_p1));
    add_ln51_9_fu_473_p2 <= std_logic_vector(unsigned(zext_ln51) + unsigned(zext_ln51_17_fu_469_p1));
    add_ln51_fu_516_p2 <= std_logic_vector(unsigned(shl_ln3_fu_508_p3) + unsigned(mul_ln51_fu_319_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_fu_356_p3)
    begin
        if (((tmp_fu_356_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_p_load12_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, empty_fu_84, add_ln51_7_fu_780_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_load12 <= add_ln51_7_fu_780_p2(47 downto 16);
        else 
            ap_sig_allocacmp_p_load12 <= empty_fu_84;
        end if; 
    end process;

    hidden_layer1_1_address0 <= zext_ln51_9_fu_464_p1(3 - 1 downto 0);
    hidden_layer1_1_address1 <= zext_ln48_fu_378_p1(3 - 1 downto 0);

    hidden_layer1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer1_1_ce0 <= ap_const_logic_1;
        else 
            hidden_layer1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hidden_layer1_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer1_1_ce1 <= ap_const_logic_1;
        else 
            hidden_layer1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hidden_layer1_2_address0 <= zext_ln51_11_fu_601_p1(3 - 1 downto 0);
    hidden_layer1_2_address1 <= zext_ln48_fu_378_p1(3 - 1 downto 0);

    hidden_layer1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer1_2_ce0 <= ap_const_logic_1;
        else 
            hidden_layer1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hidden_layer1_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer1_2_ce1 <= ap_const_logic_1;
        else 
            hidden_layer1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hidden_layer1_3_address0 <= zext_ln51_11_fu_601_p1(3 - 1 downto 0);
    hidden_layer1_3_address1 <= zext_ln48_fu_378_p1(3 - 1 downto 0);

    hidden_layer1_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer1_3_ce0 <= ap_const_logic_1;
        else 
            hidden_layer1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hidden_layer1_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer1_3_ce1 <= ap_const_logic_1;
        else 
            hidden_layer1_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hidden_layer1_address0 <= zext_ln51_7_fu_428_p1(3 - 1 downto 0);
    hidden_layer1_address1 <= zext_ln48_fu_378_p1(3 - 1 downto 0);

    hidden_layer1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer1_ce0 <= ap_const_logic_1;
        else 
            hidden_layer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hidden_layer1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hidden_layer1_ce1 <= ap_const_logic_1;
        else 
            hidden_layer1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln51_4_fu_418_p4 <= add_ln48_fu_412_p2(5 downto 2);
    lshr_ln51_6_fu_454_p4 <= add_ln48_1_fu_448_p2(5 downto 2);
    lshr_ln5_fu_368_p4 <= ap_sig_allocacmp_i_1(4 downto 2);
    mul_ln51_1_fu_323_p0 <= mul_ln51_1_fu_323_p00(31 - 1 downto 0);
    mul_ln51_1_fu_323_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer1_1_q1),48));
    mul_ln51_2_fu_311_p0 <= mul_ln51_2_fu_311_p00(31 - 1 downto 0);
    mul_ln51_2_fu_311_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer1_2_q1),47));
    mul_ln51_3_fu_327_p0 <= mul_ln51_3_fu_327_p00(31 - 1 downto 0);
    mul_ln51_3_fu_327_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer1_3_q1),48));
    mul_ln51_4_fu_331_p0 <= mul_ln51_4_fu_331_p00(31 - 1 downto 0);
    mul_ln51_4_fu_331_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer1_q0),48));
    mul_ln51_5_fu_335_p0 <= mul_ln51_5_fu_335_p00(31 - 1 downto 0);
    mul_ln51_5_fu_335_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer1_1_load_1_reg_919),48));
    mul_ln51_6_fu_315_p0 <= mul_ln51_6_fu_315_p00(31 - 1 downto 0);
    mul_ln51_6_fu_315_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer1_2_q0),47));
    mul_ln51_7_fu_339_p0 <= mul_ln51_7_fu_339_p00(31 - 1 downto 0);
    mul_ln51_7_fu_339_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer1_3_q0),48));
    mul_ln51_fu_319_p0 <= mul_ln51_fu_319_p00(31 - 1 downto 0);
    mul_ln51_fu_319_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hidden_layer1_q1),48));
    or_ln48_fu_402_p2 <= (trunc_ln48_fu_364_p1 or ap_const_lv5_2);
    or_ln51_fu_596_p2 <= (lshr_ln5_reg_829 or ap_const_lv3_1);
    p_ZL10l2_weights_0_address0 <= zext_ln51_16_fu_443_p1(8 - 1 downto 0);
    p_ZL10l2_weights_0_address1 <= zext_ln51_1_fu_394_p1(8 - 1 downto 0);

    p_ZL10l2_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l2_weights_0_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l2_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l2_weights_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l2_weights_0_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l2_weights_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZL10l2_weights_1_address0 <= zext_ln51_18_fu_479_p1(8 - 1 downto 0);
    p_ZL10l2_weights_1_address1 <= zext_ln51_1_fu_394_p1(8 - 1 downto 0);

    p_ZL10l2_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l2_weights_1_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l2_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l2_weights_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l2_weights_1_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l2_weights_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZL10l2_weights_2_address0 <= zext_ln51_12_fu_614_p1(8 - 1 downto 0);
    p_ZL10l2_weights_2_address1 <= zext_ln51_1_fu_394_p1(8 - 1 downto 0);

    p_ZL10l2_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l2_weights_2_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l2_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l2_weights_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l2_weights_2_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l2_weights_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZL10l2_weights_3_address0 <= zext_ln51_12_fu_614_p1(8 - 1 downto 0);
    p_ZL10l2_weights_3_address1 <= zext_ln51_1_fu_394_p1(8 - 1 downto 0);

    p_ZL10l2_weights_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l2_weights_3_ce0 <= ap_const_logic_1;
        else 
            p_ZL10l2_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL10l2_weights_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZL10l2_weights_3_ce1 <= ap_const_logic_1;
        else 
            p_ZL10l2_weights_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_out <= empty_fu_84;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_825)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_825 = ap_const_lv1_1))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln51_3_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln51_2_reg_894),48));

        sext_ln51_8_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln51_6_fu_315_p2),48));

    shl_ln3_fu_508_p3 <= (ap_sig_allocacmp_p_load12 & ap_const_lv16_0);
    shl_ln51_1_fu_542_p3 <= (tmp_6_fu_532_p4 & ap_const_lv16_0);
    shl_ln51_2_fu_620_p3 <= (tmp_7_reg_899 & ap_const_lv16_0);
    shl_ln51_3_fu_646_p3 <= (tmp_8_fu_636_p4 & ap_const_lv16_0);
    shl_ln51_4_fu_669_p3 <= (tmp_9_fu_659_p4 & ap_const_lv16_0);
    shl_ln51_5_fu_700_p3 <= (tmp_10_fu_690_p4 & ap_const_lv16_0);
    shl_ln51_6_fu_734_p3 <= (tmp_12_fu_724_p4 & ap_const_lv16_0);
    shl_ln51_7_fu_772_p3 <= (tmp_13_fu_762_p4 & ap_const_lv16_0);
    tmp_10_fu_690_p4 <= add_ln51_4_fu_677_p2(47 downto 16);
    tmp_11_fu_607_p3 <= (j_1 & or_ln51_fu_596_p2);
    tmp_12_fu_724_p4 <= add_ln51_5_fu_708_p2(47 downto 16);
    tmp_13_fu_762_p4 <= add_ln51_6_fu_746_p2(47 downto 16);
    tmp_6_fu_532_p4 <= add_ln51_fu_516_p2(47 downto 16);
    tmp_8_fu_636_p4 <= add_ln51_2_fu_630_p2(47 downto 16);
    tmp_9_fu_659_p4 <= add_ln51_3_fu_654_p2(47 downto 16);
    tmp_fu_356_p3 <= ap_sig_allocacmp_i_1(5 downto 5);
    tmp_s_fu_386_p3 <= (j_1 & lshr_ln5_fu_368_p4);
    trunc_ln48_fu_364_p1 <= ap_sig_allocacmp_i_1(5 - 1 downto 0);
    zext_ln48_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln5_fu_368_p4),64));
    zext_ln51_11_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln51_fu_596_p2),64));
    zext_ln51_12_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_607_p3),64));
    zext_ln51_15_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln51_4_fu_418_p4),8));
    zext_ln51_16_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_8_fu_437_p2),64));
    zext_ln51_17_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln51_6_fu_454_p4),8));
    zext_ln51_18_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_9_fu_473_p2),64));
    zext_ln51_1_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_386_p3),64));
    zext_ln51_4_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_fu_402_p2),6));
    zext_ln51_7_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln51_4_fu_418_p4),64));
    zext_ln51_9_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln51_6_fu_454_p4),64));
end behav;
