// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hidden_layer2_address0,
        hidden_layer2_ce0,
        hidden_layer2_q0,
        hidden_layer2_address1,
        hidden_layer2_ce1,
        hidden_layer2_q1,
        hidden_layer2_1_address0,
        hidden_layer2_1_ce0,
        hidden_layer2_1_q0,
        hidden_layer2_1_address1,
        hidden_layer2_1_ce1,
        hidden_layer2_1_q1,
        hidden_layer2_2_address0,
        hidden_layer2_2_ce0,
        hidden_layer2_2_q0,
        hidden_layer2_2_address1,
        hidden_layer2_2_ce1,
        hidden_layer2_2_q1,
        hidden_layer2_3_address0,
        hidden_layer2_3_ce0,
        hidden_layer2_3_q0,
        hidden_layer2_3_address1,
        hidden_layer2_3_ce1,
        hidden_layer2_3_q1,
        max_22_out,
        max_22_out_ap_vld,
        output_layer_1_11_out,
        output_layer_1_11_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] hidden_layer2_address0;
output   hidden_layer2_ce0;
input  [30:0] hidden_layer2_q0;
output  [2:0] hidden_layer2_address1;
output   hidden_layer2_ce1;
input  [30:0] hidden_layer2_q1;
output  [2:0] hidden_layer2_1_address0;
output   hidden_layer2_1_ce0;
input  [30:0] hidden_layer2_1_q0;
output  [2:0] hidden_layer2_1_address1;
output   hidden_layer2_1_ce1;
input  [30:0] hidden_layer2_1_q1;
output  [2:0] hidden_layer2_2_address0;
output   hidden_layer2_2_ce0;
input  [30:0] hidden_layer2_2_q0;
output  [2:0] hidden_layer2_2_address1;
output   hidden_layer2_2_ce1;
input  [30:0] hidden_layer2_2_q1;
output  [2:0] hidden_layer2_3_address0;
output   hidden_layer2_3_ce0;
input  [30:0] hidden_layer2_3_q0;
output  [2:0] hidden_layer2_3_address1;
output   hidden_layer2_3_ce1;
input  [30:0] hidden_layer2_3_q1;
output  [31:0] max_22_out;
output   max_22_out_ap_vld;
output  [31:0] output_layer_1_11_out;
output   output_layer_1_11_out_ap_vld;

reg ap_idle;
reg hidden_layer2_ce0;
reg hidden_layer2_ce1;
reg hidden_layer2_1_ce0;
reg hidden_layer2_1_ce1;
reg hidden_layer2_2_ce0;
reg hidden_layer2_2_ce1;
reg hidden_layer2_3_ce0;
reg hidden_layer2_3_ce1;
reg max_22_out_ap_vld;
reg output_layer_1_11_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln58_fu_395_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] p_ZL10l3_weights_0_address0;
reg    p_ZL10l3_weights_0_ce0;
wire  signed [15:0] p_ZL10l3_weights_0_q0;
wire   [3:0] p_ZL10l3_weights_0_address1;
reg    p_ZL10l3_weights_0_ce1;
wire   [15:0] p_ZL10l3_weights_0_q1;
wire   [3:0] p_ZL10l3_weights_1_address0;
reg    p_ZL10l3_weights_1_ce0;
wire  signed [15:0] p_ZL10l3_weights_1_q0;
wire   [3:0] p_ZL10l3_weights_1_address1;
reg    p_ZL10l3_weights_1_ce1;
wire   [15:0] p_ZL10l3_weights_1_q1;
wire   [3:0] p_ZL10l3_weights_2_address0;
reg    p_ZL10l3_weights_2_ce0;
wire   [15:0] p_ZL10l3_weights_2_q0;
wire   [3:0] p_ZL10l3_weights_2_address1;
reg    p_ZL10l3_weights_2_ce1;
wire   [15:0] p_ZL10l3_weights_2_q1;
wire   [3:0] p_ZL10l3_weights_3_address0;
reg    p_ZL10l3_weights_3_ce0;
wire   [15:0] p_ZL10l3_weights_3_q0;
wire   [3:0] p_ZL10l3_weights_3_address1;
reg    p_ZL10l3_weights_3_ce1;
wire   [15:0] p_ZL10l3_weights_3_q1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln58_reg_1048;
reg   [0:0] icmp_ln58_reg_1048_pp0_iter1_reg;
wire   [0:0] tmp_fu_419_p3;
reg   [0:0] tmp_reg_1052;
reg   [0:0] tmp_reg_1052_pp0_iter1_reg;
reg   [0:0] tmp_reg_1052_pp0_iter2_reg;
wire   [0:0] trunc_ln64_fu_443_p1;
reg   [0:0] trunc_ln64_reg_1059;
reg   [0:0] trunc_ln64_reg_1059_pp0_iter1_reg;
reg   [0:0] trunc_ln64_reg_1059_pp0_iter2_reg;
wire   [4:0] trunc_ln61_fu_447_p1;
reg   [4:0] trunc_ln61_reg_1068;
wire   [2:0] lshr_ln4_fu_451_p4;
reg   [2:0] lshr_ln4_reg_1073;
wire   [63:0] zext_ln61_fu_461_p1;
reg   [63:0] zext_ln61_reg_1078;
reg  signed [15:0] p_ZL10l3_weights_0_load_reg_1110;
reg   [30:0] hidden_layer2_load_reg_1115;
reg  signed [15:0] p_ZL10l3_weights_1_load_reg_1120;
reg  signed [15:0] p_ZL10l3_weights_2_load_reg_1130;
reg  signed [15:0] p_ZL10l3_weights_3_load_reg_1140;
wire   [63:0] zext_ln64_10_fu_588_p1;
reg   [63:0] zext_ln64_10_reg_1170;
wire   [46:0] mul_ln64_3_fu_352_p2;
reg   [46:0] mul_ln64_3_reg_1190;
reg   [31:0] tmp_s_reg_1195;
wire   [46:0] mul_ln64_4_fu_356_p2;
reg   [46:0] mul_ln64_4_reg_1200;
wire   [46:0] mul_ln64_5_fu_360_p2;
reg   [46:0] mul_ln64_5_reg_1205;
reg  signed [15:0] p_ZL10l3_weights_2_load_1_reg_1210;
reg   [30:0] hidden_layer2_2_load_1_reg_1215;
reg  signed [15:0] p_ZL10l3_weights_3_load_1_reg_1220;
wire   [63:0] zext_ln64_1_fu_474_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln64_14_fu_546_p1;
wire   [63:0] zext_ln64_6_fu_535_p1;
wire   [63:0] zext_ln64_15_fu_578_p1;
wire   [63:0] zext_ln64_8_fu_567_p1;
wire   [63:0] zext_ln64_11_fu_600_p1;
reg   [31:0] empty_fu_94;
wire   [31:0] trunc_ln64_7_fu_924_p4;
reg   [31:0] ap_sig_allocacmp_p_load;
wire    ap_loop_init;
reg   [5:0] i_fu_98;
wire   [5:0] add_ln61_2_fu_482_p2;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [31:0] output_layer_1_11_fu_102;
wire   [31:0] output_layer_1_1_fu_954_p3;
reg   [31:0] max_22_fu_106;
wire   [31:0] max_2_fu_947_p3;
reg   [1:0] j_fu_110;
wire   [1:0] select_ln58_3_fu_435_p3;
reg   [1:0] ap_sig_allocacmp_j_load;
reg   [31:0] max_fu_114;
wire   [31:0] select_ln58_2_fu_774_p3;
reg   [31:0] max_1_fu_118;
wire   [31:0] select_ln58_1_fu_767_p3;
reg   [3:0] indvar_flatten_fu_122;
wire   [3:0] add_ln58_1_fu_401_p2;
reg   [3:0] ap_sig_allocacmp_indvar_flatten_load;
wire    ap_block_pp0_stage0_01001;
wire   [30:0] mul_ln64_fu_340_p0;
wire   [30:0] mul_ln64_1_fu_344_p0;
wire   [30:0] mul_ln64_2_fu_348_p0;
wire   [30:0] mul_ln64_3_fu_352_p0;
wire   [30:0] mul_ln64_4_fu_356_p0;
wire   [30:0] mul_ln64_5_fu_360_p0;
wire   [30:0] mul_ln64_6_fu_364_p0;
wire   [30:0] mul_ln64_7_fu_368_p0;
wire   [1:0] add_ln58_fu_413_p2;
wire   [5:0] select_ln58_fu_427_p3;
wire   [3:0] tmp_7_fu_466_p3;
wire   [4:0] or_ln61_fu_510_p2;
wire   [5:0] zext_ln64_3_fu_515_p1;
wire   [5:0] add_ln61_fu_519_p2;
wire   [3:0] lshr_ln64_4_fu_525_p4;
wire   [3:0] tmp_6_fu_503_p3;
wire   [3:0] add_ln64_8_fu_540_p2;
wire   [5:0] add_ln61_1_fu_551_p2;
wire   [3:0] lshr_ln64_6_fu_557_p4;
wire   [3:0] add_ln64_9_fu_572_p2;
wire   [2:0] or_ln64_fu_583_p2;
wire   [3:0] tmp_3_fu_593_p3;
wire   [31:0] select_ln58_4_fu_617_p3;
wire   [46:0] mul_ln64_fu_340_p2;
wire   [47:0] shl_ln2_fu_624_p3;
wire  signed [47:0] sext_ln64_1_fu_632_p1;
wire   [47:0] add_ln64_fu_636_p2;
wire   [31:0] tmp_8_fu_651_p4;
wire   [46:0] mul_ln64_1_fu_344_p2;
wire   [47:0] shl_ln64_1_fu_661_p3;
wire  signed [47:0] sext_ln64_3_fu_669_p1;
wire   [47:0] add_ln64_1_fu_673_p2;
wire   [31:0] tmp_9_fu_688_p4;
wire   [46:0] mul_ln64_2_fu_348_p2;
wire   [47:0] shl_ln64_2_fu_698_p3;
wire  signed [47:0] sext_ln64_5_fu_706_p1;
wire   [47:0] add_ln64_2_fu_710_p2;
wire   [47:0] shl_ln64_3_fu_781_p3;
wire  signed [47:0] sext_ln64_7_fu_788_p1;
wire   [47:0] add_ln64_3_fu_791_p2;
wire   [31:0] tmp_1_fu_797_p4;
wire   [47:0] shl_ln64_4_fu_807_p3;
wire  signed [47:0] sext_ln64_9_fu_815_p1;
wire   [47:0] add_ln64_4_fu_818_p2;
wire   [31:0] tmp_2_fu_824_p4;
wire   [47:0] shl_ln64_5_fu_834_p3;
wire  signed [47:0] sext_ln64_11_fu_842_p1;
wire   [47:0] add_ln64_5_fu_845_p2;
wire   [31:0] tmp_4_fu_859_p4;
wire   [46:0] mul_ln64_6_fu_364_p2;
wire   [47:0] shl_ln64_6_fu_869_p3;
wire  signed [47:0] sext_ln64_13_fu_877_p1;
wire   [47:0] add_ln64_6_fu_881_p2;
wire   [31:0] tmp_5_fu_896_p4;
wire   [46:0] mul_ln64_7_fu_368_p2;
wire   [47:0] shl_ln64_7_fu_906_p3;
wire  signed [47:0] sext_ln64_15_fu_914_p1;
wire   [47:0] add_ln64_7_fu_918_p2;
wire   [31:0] select_ln66_fu_934_p3;
wire   [31:0] output_layer_0_fu_941_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [46:0] mul_ln64_1_fu_344_p00;
wire   [46:0] mul_ln64_2_fu_348_p00;
wire   [46:0] mul_ln64_3_fu_352_p00;
wire   [46:0] mul_ln64_4_fu_356_p00;
wire   [46:0] mul_ln64_5_fu_360_p00;
wire   [46:0] mul_ln64_6_fu_364_p00;
wire   [46:0] mul_ln64_7_fu_368_p00;
wire   [46:0] mul_ln64_fu_340_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 empty_fu_94 = 32'd0;
#0 i_fu_98 = 6'd0;
#0 output_layer_1_11_fu_102 = 32'd0;
#0 max_22_fu_106 = 32'd0;
#0 j_fu_110 = 2'd0;
#0 max_fu_114 = 32'd0;
#0 max_1_fu_118 = 32'd0;
#0 indvar_flatten_fu_122 = 4'd0;
#0 ap_done_reg = 1'b0;
end

predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_0_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
p_ZL10l3_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL10l3_weights_0_address0),
    .ce0(p_ZL10l3_weights_0_ce0),
    .q0(p_ZL10l3_weights_0_q0),
    .address1(p_ZL10l3_weights_0_address1),
    .ce1(p_ZL10l3_weights_0_ce1),
    .q1(p_ZL10l3_weights_0_q1)
);

predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_1_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
p_ZL10l3_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL10l3_weights_1_address0),
    .ce0(p_ZL10l3_weights_1_ce0),
    .q0(p_ZL10l3_weights_1_q0),
    .address1(p_ZL10l3_weights_1_address1),
    .ce1(p_ZL10l3_weights_1_ce1),
    .q1(p_ZL10l3_weights_1_q1)
);

predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_2_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
p_ZL10l3_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL10l3_weights_2_address0),
    .ce0(p_ZL10l3_weights_2_ce0),
    .q0(p_ZL10l3_weights_2_q0),
    .address1(p_ZL10l3_weights_2_address1),
    .ce1(p_ZL10l3_weights_2_ce1),
    .q1(p_ZL10l3_weights_2_q1)
);

predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4_p_ZL10l3_weights_3_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
p_ZL10l3_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL10l3_weights_3_address0),
    .ce0(p_ZL10l3_weights_3_ce0),
    .q0(p_ZL10l3_weights_3_q0),
    .address1(p_ZL10l3_weights_3_address1),
    .ce1(p_ZL10l3_weights_3_ce1),
    .q1(p_ZL10l3_weights_3_q1)
);

predict_mul_31ns_16s_47_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 47 ))
mul_31ns_16s_47_1_1_U53(
    .din0(mul_ln64_fu_340_p0),
    .din1(p_ZL10l3_weights_0_load_reg_1110),
    .dout(mul_ln64_fu_340_p2)
);

predict_mul_31ns_16s_47_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 47 ))
mul_31ns_16s_47_1_1_U54(
    .din0(mul_ln64_1_fu_344_p0),
    .din1(p_ZL10l3_weights_1_load_reg_1120),
    .dout(mul_ln64_1_fu_344_p2)
);

predict_mul_31ns_16s_47_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 47 ))
mul_31ns_16s_47_1_1_U55(
    .din0(mul_ln64_2_fu_348_p0),
    .din1(p_ZL10l3_weights_2_load_reg_1130),
    .dout(mul_ln64_2_fu_348_p2)
);

predict_mul_31ns_16s_47_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 47 ))
mul_31ns_16s_47_1_1_U56(
    .din0(mul_ln64_3_fu_352_p0),
    .din1(p_ZL10l3_weights_3_load_reg_1140),
    .dout(mul_ln64_3_fu_352_p2)
);

predict_mul_31ns_16s_47_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 47 ))
mul_31ns_16s_47_1_1_U57(
    .din0(mul_ln64_4_fu_356_p0),
    .din1(p_ZL10l3_weights_0_q0),
    .dout(mul_ln64_4_fu_356_p2)
);

predict_mul_31ns_16s_47_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 47 ))
mul_31ns_16s_47_1_1_U58(
    .din0(mul_ln64_5_fu_360_p0),
    .din1(p_ZL10l3_weights_1_q0),
    .dout(mul_ln64_5_fu_360_p2)
);

predict_mul_31ns_16s_47_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 47 ))
mul_31ns_16s_47_1_1_U59(
    .din0(mul_ln64_6_fu_364_p0),
    .din1(p_ZL10l3_weights_2_load_1_reg_1210),
    .dout(mul_ln64_6_fu_364_p2)
);

predict_mul_31ns_16s_47_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 47 ))
mul_31ns_16s_47_1_1_U60(
    .din0(mul_ln64_7_fu_368_p0),
    .din1(p_ZL10l3_weights_3_load_1_reg_1220),
    .dout(mul_ln64_7_fu_368_p2)
);

predict_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_fu_94 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            empty_fu_94 <= {{add_ln64_7_fu_918_p2[47:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_395_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_98 <= add_ln61_2_fu_482_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_98 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_395_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_122 <= add_ln58_1_fu_401_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_122 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_395_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_110 <= select_ln58_3_fu_435_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_110 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln58_reg_1048 <= icmp_ln58_fu_395_p2;
        icmp_ln58_reg_1048_pp0_iter1_reg <= icmp_ln58_reg_1048;
        lshr_ln4_reg_1073 <= {{select_ln58_fu_427_p3[4:2]}};
        tmp_reg_1052 <= ap_sig_allocacmp_i_load[32'd5];
        tmp_reg_1052_pp0_iter1_reg <= tmp_reg_1052;
        trunc_ln61_reg_1068 <= trunc_ln61_fu_447_p1;
        trunc_ln64_reg_1059 <= trunc_ln64_fu_443_p1;
        trunc_ln64_reg_1059_pp0_iter1_reg <= trunc_ln64_reg_1059;
        zext_ln61_reg_1078[2 : 0] <= zext_ln61_fu_461_p1[2 : 0];
        zext_ln64_10_reg_1170[2 : 1] <= zext_ln64_10_fu_588_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        hidden_layer2_2_load_1_reg_1215 <= hidden_layer2_2_q0;
        p_ZL10l3_weights_2_load_1_reg_1210 <= p_ZL10l3_weights_2_q0;
        p_ZL10l3_weights_3_load_1_reg_1220 <= p_ZL10l3_weights_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hidden_layer2_load_reg_1115 <= hidden_layer2_q1;
        p_ZL10l3_weights_0_load_reg_1110 <= p_ZL10l3_weights_0_q1;
        p_ZL10l3_weights_1_load_reg_1120 <= p_ZL10l3_weights_1_q1;
        p_ZL10l3_weights_2_load_reg_1130 <= p_ZL10l3_weights_2_q1;
        p_ZL10l3_weights_3_load_reg_1140 <= p_ZL10l3_weights_3_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_1_fu_118 <= select_ln58_1_fu_767_p3;
        max_22_fu_106 <= max_2_fu_947_p3;
        max_fu_114 <= select_ln58_2_fu_774_p3;
        output_layer_1_11_fu_102 <= output_layer_1_1_fu_954_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        mul_ln64_3_reg_1190 <= mul_ln64_3_fu_352_p2;
        mul_ln64_4_reg_1200 <= mul_ln64_4_fu_356_p2;
        mul_ln64_5_reg_1205 <= mul_ln64_5_fu_360_p2;
        tmp_reg_1052_pp0_iter2_reg <= tmp_reg_1052_pp0_iter1_reg;
        tmp_s_reg_1195 <= {{add_ln64_2_fu_710_p2[47:16]}};
        trunc_ln64_reg_1059_pp0_iter2_reg <= trunc_ln64_reg_1059_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_395_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 4'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 2'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_p_load = {{add_ln64_7_fu_918_p2[47:16]}};
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hidden_layer2_1_ce0 = 1'b1;
    end else begin
        hidden_layer2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hidden_layer2_1_ce1 = 1'b1;
    end else begin
        hidden_layer2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hidden_layer2_2_ce0 = 1'b1;
    end else begin
        hidden_layer2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hidden_layer2_2_ce1 = 1'b1;
    end else begin
        hidden_layer2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        hidden_layer2_3_ce0 = 1'b1;
    end else begin
        hidden_layer2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hidden_layer2_3_ce1 = 1'b1;
    end else begin
        hidden_layer2_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hidden_layer2_ce0 = 1'b1;
    end else begin
        hidden_layer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hidden_layer2_ce1 = 1'b1;
    end else begin
        hidden_layer2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_1048_pp0_iter1_reg == 1'd1))) begin
        max_22_out_ap_vld = 1'b1;
    end else begin
        max_22_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_1048_pp0_iter1_reg == 1'd1))) begin
        output_layer_1_11_out_ap_vld = 1'b1;
    end else begin
        output_layer_1_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l3_weights_0_ce0 = 1'b1;
    end else begin
        p_ZL10l3_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l3_weights_0_ce1 = 1'b1;
    end else begin
        p_ZL10l3_weights_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l3_weights_1_ce0 = 1'b1;
    end else begin
        p_ZL10l3_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l3_weights_1_ce1 = 1'b1;
    end else begin
        p_ZL10l3_weights_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l3_weights_2_ce0 = 1'b1;
    end else begin
        p_ZL10l3_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l3_weights_2_ce1 = 1'b1;
    end else begin
        p_ZL10l3_weights_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l3_weights_3_ce0 = 1'b1;
    end else begin
        p_ZL10l3_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l3_weights_3_ce1 = 1'b1;
    end else begin
        p_ZL10l3_weights_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_1_fu_401_p2 = (ap_sig_allocacmp_indvar_flatten_load + 4'd1);

assign add_ln58_fu_413_p2 = (ap_sig_allocacmp_j_load + 2'd1);

assign add_ln61_1_fu_551_p2 = (zext_ln64_3_fu_515_p1 + 6'd3);

assign add_ln61_2_fu_482_p2 = (select_ln58_fu_427_p3 + 6'd8);

assign add_ln61_fu_519_p2 = (zext_ln64_3_fu_515_p1 + 6'd2);

assign add_ln64_1_fu_673_p2 = ($signed(shl_ln64_1_fu_661_p3) + $signed(sext_ln64_3_fu_669_p1));

assign add_ln64_2_fu_710_p2 = ($signed(shl_ln64_2_fu_698_p3) + $signed(sext_ln64_5_fu_706_p1));

assign add_ln64_3_fu_791_p2 = ($signed(shl_ln64_3_fu_781_p3) + $signed(sext_ln64_7_fu_788_p1));

assign add_ln64_4_fu_818_p2 = ($signed(shl_ln64_4_fu_807_p3) + $signed(sext_ln64_9_fu_815_p1));

assign add_ln64_5_fu_845_p2 = ($signed(shl_ln64_5_fu_834_p3) + $signed(sext_ln64_11_fu_842_p1));

assign add_ln64_6_fu_881_p2 = ($signed(shl_ln64_6_fu_869_p3) + $signed(sext_ln64_13_fu_877_p1));

assign add_ln64_7_fu_918_p2 = ($signed(shl_ln64_7_fu_906_p3) + $signed(sext_ln64_15_fu_914_p1));

assign add_ln64_8_fu_540_p2 = (tmp_6_fu_503_p3 + lshr_ln64_4_fu_525_p4);

assign add_ln64_9_fu_572_p2 = (tmp_6_fu_503_p3 + lshr_ln64_6_fu_557_p4);

assign add_ln64_fu_636_p2 = ($signed(shl_ln2_fu_624_p3) + $signed(sext_ln64_1_fu_632_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign hidden_layer2_1_address0 = zext_ln64_8_fu_567_p1;

assign hidden_layer2_1_address1 = zext_ln61_reg_1078;

assign hidden_layer2_2_address0 = zext_ln64_10_fu_588_p1;

assign hidden_layer2_2_address1 = zext_ln61_reg_1078;

assign hidden_layer2_3_address0 = zext_ln64_10_reg_1170;

assign hidden_layer2_3_address1 = zext_ln61_reg_1078;

assign hidden_layer2_address0 = zext_ln64_6_fu_535_p1;

assign hidden_layer2_address1 = zext_ln61_fu_461_p1;

assign icmp_ln58_fu_395_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 4'd8) ? 1'b1 : 1'b0);

assign lshr_ln4_fu_451_p4 = {{select_ln58_fu_427_p3[4:2]}};

assign lshr_ln64_4_fu_525_p4 = {{add_ln61_fu_519_p2[5:2]}};

assign lshr_ln64_6_fu_557_p4 = {{add_ln61_1_fu_551_p2[5:2]}};

assign max_22_out = max_22_fu_106;

assign max_2_fu_947_p3 = ((trunc_ln64_reg_1059_pp0_iter2_reg[0:0] == 1'b1) ? output_layer_0_fu_941_p2 : select_ln58_1_fu_767_p3);

assign mul_ln64_1_fu_344_p0 = mul_ln64_1_fu_344_p00;

assign mul_ln64_1_fu_344_p00 = hidden_layer2_1_q1;

assign mul_ln64_2_fu_348_p0 = mul_ln64_2_fu_348_p00;

assign mul_ln64_2_fu_348_p00 = hidden_layer2_2_q1;

assign mul_ln64_3_fu_352_p0 = mul_ln64_3_fu_352_p00;

assign mul_ln64_3_fu_352_p00 = hidden_layer2_3_q1;

assign mul_ln64_4_fu_356_p0 = mul_ln64_4_fu_356_p00;

assign mul_ln64_4_fu_356_p00 = hidden_layer2_q0;

assign mul_ln64_5_fu_360_p0 = mul_ln64_5_fu_360_p00;

assign mul_ln64_5_fu_360_p00 = hidden_layer2_1_q0;

assign mul_ln64_6_fu_364_p0 = mul_ln64_6_fu_364_p00;

assign mul_ln64_6_fu_364_p00 = hidden_layer2_2_load_1_reg_1215;

assign mul_ln64_7_fu_368_p0 = mul_ln64_7_fu_368_p00;

assign mul_ln64_7_fu_368_p00 = hidden_layer2_3_q0;

assign mul_ln64_fu_340_p0 = mul_ln64_fu_340_p00;

assign mul_ln64_fu_340_p00 = hidden_layer2_load_reg_1115;

assign or_ln61_fu_510_p2 = (trunc_ln61_reg_1068 | 5'd2);

assign or_ln64_fu_583_p2 = (lshr_ln4_reg_1073 | 3'd1);

assign output_layer_0_fu_941_p2 = (select_ln66_fu_934_p3 + trunc_ln64_7_fu_924_p4);

assign output_layer_1_11_out = output_layer_1_11_fu_102;

assign output_layer_1_1_fu_954_p3 = ((trunc_ln64_reg_1059_pp0_iter2_reg[0:0] == 1'b1) ? select_ln58_2_fu_774_p3 : output_layer_0_fu_941_p2);

assign p_ZL10l3_weights_0_address0 = zext_ln64_14_fu_546_p1;

assign p_ZL10l3_weights_0_address1 = zext_ln64_1_fu_474_p1;

assign p_ZL10l3_weights_1_address0 = zext_ln64_15_fu_578_p1;

assign p_ZL10l3_weights_1_address1 = zext_ln64_1_fu_474_p1;

assign p_ZL10l3_weights_2_address0 = zext_ln64_11_fu_600_p1;

assign p_ZL10l3_weights_2_address1 = zext_ln64_1_fu_474_p1;

assign p_ZL10l3_weights_3_address0 = zext_ln64_11_fu_600_p1;

assign p_ZL10l3_weights_3_address1 = zext_ln64_1_fu_474_p1;

assign select_ln58_1_fu_767_p3 = ((tmp_reg_1052_pp0_iter2_reg[0:0] == 1'b1) ? max_22_fu_106 : max_1_fu_118);

assign select_ln58_2_fu_774_p3 = ((tmp_reg_1052_pp0_iter2_reg[0:0] == 1'b1) ? output_layer_1_11_fu_102 : max_fu_114);

assign select_ln58_3_fu_435_p3 = ((tmp_fu_419_p3[0:0] == 1'b1) ? add_ln58_fu_413_p2 : ap_sig_allocacmp_j_load);

assign select_ln58_4_fu_617_p3 = ((tmp_reg_1052_pp0_iter1_reg[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_p_load);

assign select_ln58_fu_427_p3 = ((tmp_fu_419_p3[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_i_load);

assign select_ln66_fu_934_p3 = ((trunc_ln64_reg_1059_pp0_iter2_reg[0:0] == 1'b1) ? 32'd4294949450 : 32'd9870);

assign sext_ln64_11_fu_842_p1 = $signed(mul_ln64_5_reg_1205);

assign sext_ln64_13_fu_877_p1 = $signed(mul_ln64_6_fu_364_p2);

assign sext_ln64_15_fu_914_p1 = $signed(mul_ln64_7_fu_368_p2);

assign sext_ln64_1_fu_632_p1 = $signed(mul_ln64_fu_340_p2);

assign sext_ln64_3_fu_669_p1 = $signed(mul_ln64_1_fu_344_p2);

assign sext_ln64_5_fu_706_p1 = $signed(mul_ln64_2_fu_348_p2);

assign sext_ln64_7_fu_788_p1 = $signed(mul_ln64_3_reg_1190);

assign sext_ln64_9_fu_815_p1 = $signed(mul_ln64_4_reg_1200);

assign shl_ln2_fu_624_p3 = {{select_ln58_4_fu_617_p3}, {16'd0}};

assign shl_ln64_1_fu_661_p3 = {{tmp_8_fu_651_p4}, {16'd0}};

assign shl_ln64_2_fu_698_p3 = {{tmp_9_fu_688_p4}, {16'd0}};

assign shl_ln64_3_fu_781_p3 = {{tmp_s_reg_1195}, {16'd0}};

assign shl_ln64_4_fu_807_p3 = {{tmp_1_fu_797_p4}, {16'd0}};

assign shl_ln64_5_fu_834_p3 = {{tmp_2_fu_824_p4}, {16'd0}};

assign shl_ln64_6_fu_869_p3 = {{tmp_4_fu_859_p4}, {16'd0}};

assign shl_ln64_7_fu_906_p3 = {{tmp_5_fu_896_p4}, {16'd0}};

assign tmp_1_fu_797_p4 = {{add_ln64_3_fu_791_p2[47:16]}};

assign tmp_2_fu_824_p4 = {{add_ln64_4_fu_818_p2[47:16]}};

assign tmp_3_fu_593_p3 = {{trunc_ln64_reg_1059}, {or_ln64_fu_583_p2}};

assign tmp_4_fu_859_p4 = {{add_ln64_5_fu_845_p2[47:16]}};

assign tmp_5_fu_896_p4 = {{add_ln64_6_fu_881_p2[47:16]}};

assign tmp_6_fu_503_p3 = {{trunc_ln64_reg_1059}, {3'd0}};

assign tmp_7_fu_466_p3 = {{trunc_ln64_fu_443_p1}, {lshr_ln4_fu_451_p4}};

assign tmp_8_fu_651_p4 = {{add_ln64_fu_636_p2[47:16]}};

assign tmp_9_fu_688_p4 = {{add_ln64_1_fu_673_p2[47:16]}};

assign tmp_fu_419_p3 = ap_sig_allocacmp_i_load[32'd5];

assign trunc_ln61_fu_447_p1 = select_ln58_fu_427_p3[4:0];

assign trunc_ln64_7_fu_924_p4 = {{add_ln64_7_fu_918_p2[47:16]}};

assign trunc_ln64_fu_443_p1 = select_ln58_3_fu_435_p3[0:0];

assign zext_ln61_fu_461_p1 = lshr_ln4_fu_451_p4;

assign zext_ln64_10_fu_588_p1 = or_ln64_fu_583_p2;

assign zext_ln64_11_fu_600_p1 = tmp_3_fu_593_p3;

assign zext_ln64_14_fu_546_p1 = add_ln64_8_fu_540_p2;

assign zext_ln64_15_fu_578_p1 = add_ln64_9_fu_572_p2;

assign zext_ln64_1_fu_474_p1 = tmp_7_fu_466_p3;

assign zext_ln64_3_fu_515_p1 = or_ln61_fu_510_p2;

assign zext_ln64_6_fu_535_p1 = lshr_ln64_4_fu_525_p4;

assign zext_ln64_8_fu_567_p1 = lshr_ln64_6_fu_557_p4;

always @ (posedge ap_clk) begin
    zext_ln61_reg_1078[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln64_10_reg_1170[0] <= 1'b1;
    zext_ln64_10_reg_1170[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //predict_predict_Pipeline_matmul3_VITIS_LOOP_61_4
