// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module predict_predict_Pipeline_VITIS_LOOP_35_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_ln38_8,
        input_layer_address0,
        input_layer_ce0,
        input_layer_q0,
        input_layer_address1,
        input_layer_ce1,
        input_layer_q1,
        input_layer_1_address0,
        input_layer_1_ce0,
        input_layer_1_q0,
        input_layer_1_address1,
        input_layer_1_ce1,
        input_layer_1_q1,
        input_layer_2_address0,
        input_layer_2_ce0,
        input_layer_2_q0,
        input_layer_2_address1,
        input_layer_2_ce1,
        input_layer_2_q1,
        input_layer_3_address0,
        input_layer_3_ce0,
        input_layer_3_q0,
        input_layer_3_address1,
        input_layer_3_ce1,
        input_layer_3_q1,
        trunc_ln38_3_out,
        trunc_ln38_3_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] add_ln38_8;
output  [3:0] input_layer_address0;
output   input_layer_ce0;
input  [31:0] input_layer_q0;
output  [3:0] input_layer_address1;
output   input_layer_ce1;
input  [31:0] input_layer_q1;
output  [3:0] input_layer_1_address0;
output   input_layer_1_ce0;
input  [31:0] input_layer_1_q0;
output  [3:0] input_layer_1_address1;
output   input_layer_1_ce1;
input  [31:0] input_layer_1_q1;
output  [3:0] input_layer_2_address0;
output   input_layer_2_ce0;
input  [31:0] input_layer_2_q0;
output  [3:0] input_layer_2_address1;
output   input_layer_2_ce1;
input  [31:0] input_layer_2_q1;
output  [3:0] input_layer_3_address0;
output   input_layer_3_ce0;
input  [31:0] input_layer_3_q0;
output  [3:0] input_layer_3_address1;
output   input_layer_3_ce1;
input  [31:0] input_layer_3_q1;
output  [31:0] trunc_ln38_3_out;
output   trunc_ln38_3_out_ap_vld;

reg ap_idle;
reg input_layer_ce0;
reg input_layer_ce1;
reg input_layer_1_ce0;
reg input_layer_1_ce1;
reg input_layer_2_ce0;
reg input_layer_2_ce1;
reg input_layer_3_ce0;
reg input_layer_3_ce1;
reg trunc_ln38_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln35_fu_396_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [8:0] p_ZL10l1_weights_0_address0;
reg    p_ZL10l1_weights_0_ce0;
wire  signed [15:0] p_ZL10l1_weights_0_q0;
wire   [8:0] p_ZL10l1_weights_0_address1;
reg    p_ZL10l1_weights_0_ce1;
wire  signed [15:0] p_ZL10l1_weights_0_q1;
wire   [8:0] p_ZL10l1_weights_1_address0;
reg    p_ZL10l1_weights_1_ce0;
wire   [15:0] p_ZL10l1_weights_1_q0;
wire   [8:0] p_ZL10l1_weights_1_address1;
reg    p_ZL10l1_weights_1_ce1;
wire  signed [15:0] p_ZL10l1_weights_1_q1;
wire   [8:0] p_ZL10l1_weights_2_address0;
reg    p_ZL10l1_weights_2_ce0;
wire  signed [16:0] p_ZL10l1_weights_2_q0;
wire   [8:0] p_ZL10l1_weights_2_address1;
reg    p_ZL10l1_weights_2_ce1;
wire  signed [16:0] p_ZL10l1_weights_2_q1;
wire   [8:0] p_ZL10l1_weights_3_address0;
reg    p_ZL10l1_weights_3_ce0;
wire  signed [15:0] p_ZL10l1_weights_3_q0;
wire   [8:0] p_ZL10l1_weights_3_address1;
reg    p_ZL10l1_weights_3_ce1;
wire  signed [15:0] p_ZL10l1_weights_3_q1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] lshr_ln3_fu_344_p4;
reg   [3:0] lshr_ln3_reg_799;
reg   [0:0] icmp_ln35_reg_844;
reg   [0:0] icmp_ln35_reg_844_pp0_iter1_reg;
wire   [47:0] mul_ln38_2_fu_323_p2;
reg   [47:0] mul_ln38_2_reg_868;
reg   [31:0] tmp_4_reg_873;
wire   [47:0] mul_ln38_3_fu_307_p2;
reg   [47:0] mul_ln38_3_reg_878;
wire   [47:0] mul_ln38_4_fu_311_p2;
reg   [47:0] mul_ln38_4_reg_883;
reg  signed [15:0] p_ZL10l1_weights_1_load_1_reg_888;
reg  signed [31:0] input_layer_1_load_1_reg_893;
wire   [63:0] zext_ln38_4_fu_372_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln35_fu_354_p1;
wire   [63:0] zext_ln38_6_fu_427_p1;
wire   [63:0] zext_ln35_1_fu_412_p1;
wire   [63:0] zext_ln38_8_fu_463_p1;
wire   [63:0] zext_ln38_2_fu_448_p1;
wire   [63:0] zext_ln38_10_fu_600_p1;
wire   [63:0] zext_ln38_3_fu_585_p1;
reg   [31:0] empty_fu_78;
reg   [31:0] ap_sig_allocacmp_p_load;
wire    ap_loop_init;
reg   [5:0] i_1_fu_82;
wire   [5:0] add_ln35_2_fu_468_p2;
reg   [5:0] ap_sig_allocacmp_i;
wire   [31:0] trunc_ln38_3_fu_641_p4;
wire    ap_block_pp0_stage0_01001;
wire   [8:0] zext_ln38_fu_362_p1;
wire   [8:0] add_ln38_9_fu_366_p2;
wire   [5:0] or_ln35_fu_380_p2;
wire   [6:0] zext_ln38_1_fu_386_p1;
wire   [6:0] add_ln35_fu_390_p2;
wire   [4:0] lshr_ln35_1_fu_402_p4;
wire   [8:0] zext_ln38_5_fu_417_p1;
wire   [8:0] add_ln38_10_fu_421_p2;
wire   [6:0] add_ln35_1_fu_432_p2;
wire   [4:0] lshr_ln38_5_fu_438_p4;
wire   [8:0] zext_ln38_7_fu_453_p1;
wire   [8:0] add_ln38_11_fu_457_p2;
wire   [47:0] shl_ln1_fu_492_p3;
wire   [47:0] mul_ln38_fu_299_p2;
wire   [47:0] add_ln38_fu_500_p2;
wire   [31:0] tmp_3_fu_516_p4;
wire   [47:0] shl_ln38_1_fu_526_p3;
wire   [47:0] mul_ln38_1_fu_303_p2;
wire   [47:0] add_ln38_1_fu_534_p2;
wire   [3:0] or_ln38_fu_580_p2;
wire   [8:0] zext_ln38_9_fu_591_p1;
wire   [8:0] add_ln38_12_fu_595_p2;
wire   [47:0] shl_ln38_2_fu_606_p3;
wire   [47:0] add_ln38_2_fu_613_p2;
wire   [31:0] tmp_5_fu_618_p4;
wire   [47:0] shl_ln38_3_fu_628_p3;
wire   [47:0] add_ln38_3_fu_636_p2;
wire   [47:0] shl_ln38_4_fu_652_p3;
wire   [47:0] add_ln38_4_fu_660_p2;
wire   [31:0] tmp_s_fu_673_p4;
wire   [47:0] shl_ln38_5_fu_683_p3;
wire   [47:0] mul_ln38_5_fu_315_p2;
wire   [47:0] add_ln38_5_fu_691_p2;
wire   [31:0] tmp_14_fu_707_p4;
wire   [47:0] shl_ln38_6_fu_717_p3;
wire   [47:0] mul_ln38_6_fu_327_p2;
wire   [47:0] add_ln38_6_fu_725_p2;
wire   [31:0] tmp_15_fu_741_p4;
wire   [47:0] shl_ln38_7_fu_751_p3;
wire   [47:0] mul_ln38_7_fu_319_p2;
wire   [47:0] add_ln38_7_fu_759_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 empty_fu_78 = 32'd0;
#0 i_1_fu_82 = 6'd0;
#0 ap_done_reg = 1'b0;
end

predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_0_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
p_ZL10l1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL10l1_weights_0_address0),
    .ce0(p_ZL10l1_weights_0_ce0),
    .q0(p_ZL10l1_weights_0_q0),
    .address1(p_ZL10l1_weights_0_address1),
    .ce1(p_ZL10l1_weights_0_ce1),
    .q1(p_ZL10l1_weights_0_q1)
);

predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_1_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
p_ZL10l1_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL10l1_weights_1_address0),
    .ce0(p_ZL10l1_weights_1_ce0),
    .q0(p_ZL10l1_weights_1_q0),
    .address1(p_ZL10l1_weights_1_address1),
    .ce1(p_ZL10l1_weights_1_ce1),
    .q1(p_ZL10l1_weights_1_q1)
);

predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_2_ROM_AUTO_1R #(
    .DataWidth( 17 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
p_ZL10l1_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL10l1_weights_2_address0),
    .ce0(p_ZL10l1_weights_2_ce0),
    .q0(p_ZL10l1_weights_2_q0),
    .address1(p_ZL10l1_weights_2_address1),
    .ce1(p_ZL10l1_weights_2_ce1),
    .q1(p_ZL10l1_weights_2_q1)
);

predict_predict_Pipeline_VITIS_LOOP_35_2_p_ZL10l1_weights_3_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
p_ZL10l1_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL10l1_weights_3_address0),
    .ce0(p_ZL10l1_weights_3_ce0),
    .q0(p_ZL10l1_weights_3_q0),
    .address1(p_ZL10l1_weights_3_address1),
    .ce1(p_ZL10l1_weights_3_ce1),
    .q1(p_ZL10l1_weights_3_q1)
);

predict_mul_32s_16s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
mul_32s_16s_48_1_1_U12(
    .din0(input_layer_q1),
    .din1(p_ZL10l1_weights_0_q1),
    .dout(mul_ln38_fu_299_p2)
);

predict_mul_32s_16s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
mul_32s_16s_48_1_1_U13(
    .din0(input_layer_1_q1),
    .din1(p_ZL10l1_weights_1_q1),
    .dout(mul_ln38_1_fu_303_p2)
);

predict_mul_32s_16s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
mul_32s_16s_48_1_1_U14(
    .din0(input_layer_3_q1),
    .din1(p_ZL10l1_weights_3_q1),
    .dout(mul_ln38_3_fu_307_p2)
);

predict_mul_32s_16s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
mul_32s_16s_48_1_1_U15(
    .din0(input_layer_q0),
    .din1(p_ZL10l1_weights_0_q0),
    .dout(mul_ln38_4_fu_311_p2)
);

predict_mul_32s_16s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
mul_32s_16s_48_1_1_U16(
    .din0(input_layer_1_load_1_reg_893),
    .din1(p_ZL10l1_weights_1_load_1_reg_888),
    .dout(mul_ln38_5_fu_315_p2)
);

predict_mul_32s_16s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
mul_32s_16s_48_1_1_U17(
    .din0(input_layer_3_q0),
    .din1(p_ZL10l1_weights_3_q0),
    .dout(mul_ln38_7_fu_319_p2)
);

predict_mul_32s_17s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 48 ))
mul_32s_17s_48_1_1_U18(
    .din0(input_layer_2_q1),
    .din1(p_ZL10l1_weights_2_q1),
    .dout(mul_ln38_2_fu_323_p2)
);

predict_mul_32s_17s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 48 ))
mul_32s_17s_48_1_1_U19(
    .din0(input_layer_2_q0),
    .din1(p_ZL10l1_weights_2_q0),
    .dout(mul_ln38_6_fu_327_p2)
);

predict_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_fu_78 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln35_reg_844_pp0_iter1_reg == 1'd1))) begin
            empty_fu_78 <= {{add_ln38_7_fu_759_p2[47:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln35_fu_396_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_82 <= add_ln35_2_fu_468_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_82 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln35_reg_844 <= icmp_ln35_fu_396_p2;
        icmp_ln35_reg_844_pp0_iter1_reg <= icmp_ln35_reg_844;
        lshr_ln3_reg_799 <= {{ap_sig_allocacmp_i[5:2]}};
        mul_ln38_2_reg_868 <= mul_ln38_2_fu_323_p2;
        mul_ln38_3_reg_878 <= mul_ln38_3_fu_307_p2;
        mul_ln38_4_reg_883 <= mul_ln38_4_fu_311_p2;
        tmp_4_reg_873 <= {{add_ln38_1_fu_534_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_layer_1_load_1_reg_893 <= input_layer_1_q0;
        p_ZL10l1_weights_1_load_1_reg_888 <= p_ZL10l1_weights_1_q0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_396_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 6'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln35_reg_844_pp0_iter1_reg == 1'd1))) begin
        ap_sig_allocacmp_p_load = {{add_ln38_7_fu_759_p2[47:16]}};
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_layer_1_ce0 = 1'b1;
    end else begin
        input_layer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_layer_1_ce1 = 1'b1;
    end else begin
        input_layer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_layer_2_ce0 = 1'b1;
    end else begin
        input_layer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_layer_2_ce1 = 1'b1;
    end else begin
        input_layer_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_layer_3_ce0 = 1'b1;
    end else begin
        input_layer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_layer_3_ce1 = 1'b1;
    end else begin
        input_layer_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_layer_ce0 = 1'b1;
    end else begin
        input_layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_layer_ce1 = 1'b1;
    end else begin
        input_layer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l1_weights_0_ce0 = 1'b1;
    end else begin
        p_ZL10l1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l1_weights_0_ce1 = 1'b1;
    end else begin
        p_ZL10l1_weights_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l1_weights_1_ce0 = 1'b1;
    end else begin
        p_ZL10l1_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l1_weights_1_ce1 = 1'b1;
    end else begin
        p_ZL10l1_weights_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l1_weights_2_ce0 = 1'b1;
    end else begin
        p_ZL10l1_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l1_weights_2_ce1 = 1'b1;
    end else begin
        p_ZL10l1_weights_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l1_weights_3_ce0 = 1'b1;
    end else begin
        p_ZL10l1_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL10l1_weights_3_ce1 = 1'b1;
    end else begin
        p_ZL10l1_weights_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln35_reg_844_pp0_iter1_reg == 1'd0))) begin
        trunc_ln38_3_out_ap_vld = 1'b1;
    end else begin
        trunc_ln38_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_1_fu_432_p2 = (zext_ln38_1_fu_386_p1 + 7'd3);

assign add_ln35_2_fu_468_p2 = (ap_sig_allocacmp_i + 6'd8);

assign add_ln35_fu_390_p2 = (zext_ln38_1_fu_386_p1 + 7'd2);

assign add_ln38_10_fu_421_p2 = (add_ln38_8 + zext_ln38_5_fu_417_p1);

assign add_ln38_11_fu_457_p2 = (add_ln38_8 + zext_ln38_7_fu_453_p1);

assign add_ln38_12_fu_595_p2 = (add_ln38_8 + zext_ln38_9_fu_591_p1);

assign add_ln38_1_fu_534_p2 = (shl_ln38_1_fu_526_p3 + mul_ln38_1_fu_303_p2);

assign add_ln38_2_fu_613_p2 = (shl_ln38_2_fu_606_p3 + mul_ln38_2_reg_868);

assign add_ln38_3_fu_636_p2 = (shl_ln38_3_fu_628_p3 + mul_ln38_3_reg_878);

assign add_ln38_4_fu_660_p2 = (shl_ln38_4_fu_652_p3 + mul_ln38_4_reg_883);

assign add_ln38_5_fu_691_p2 = (shl_ln38_5_fu_683_p3 + mul_ln38_5_fu_315_p2);

assign add_ln38_6_fu_725_p2 = (shl_ln38_6_fu_717_p3 + mul_ln38_6_fu_327_p2);

assign add_ln38_7_fu_759_p2 = (shl_ln38_7_fu_751_p3 + mul_ln38_7_fu_319_p2);

assign add_ln38_9_fu_366_p2 = (add_ln38_8 + zext_ln38_fu_362_p1);

assign add_ln38_fu_500_p2 = (shl_ln1_fu_492_p3 + mul_ln38_fu_299_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln35_fu_396_p2 = ((add_ln35_fu_390_p2 < 7'd36) ? 1'b1 : 1'b0);

assign input_layer_1_address0 = zext_ln38_2_fu_448_p1;

assign input_layer_1_address1 = zext_ln35_fu_354_p1;

assign input_layer_2_address0 = zext_ln38_3_fu_585_p1;

assign input_layer_2_address1 = zext_ln35_fu_354_p1;

assign input_layer_3_address0 = zext_ln38_3_fu_585_p1;

assign input_layer_3_address1 = zext_ln35_fu_354_p1;

assign input_layer_address0 = zext_ln35_1_fu_412_p1;

assign input_layer_address1 = zext_ln35_fu_354_p1;

assign lshr_ln35_1_fu_402_p4 = {{add_ln35_fu_390_p2[6:2]}};

assign lshr_ln38_5_fu_438_p4 = {{add_ln35_1_fu_432_p2[6:2]}};

assign lshr_ln3_fu_344_p4 = {{ap_sig_allocacmp_i[5:2]}};

assign or_ln35_fu_380_p2 = (ap_sig_allocacmp_i | 6'd2);

assign or_ln38_fu_580_p2 = (lshr_ln3_reg_799 | 4'd1);

assign p_ZL10l1_weights_0_address0 = zext_ln38_6_fu_427_p1;

assign p_ZL10l1_weights_0_address1 = zext_ln38_4_fu_372_p1;

assign p_ZL10l1_weights_1_address0 = zext_ln38_8_fu_463_p1;

assign p_ZL10l1_weights_1_address1 = zext_ln38_4_fu_372_p1;

assign p_ZL10l1_weights_2_address0 = zext_ln38_10_fu_600_p1;

assign p_ZL10l1_weights_2_address1 = zext_ln38_4_fu_372_p1;

assign p_ZL10l1_weights_3_address0 = zext_ln38_10_fu_600_p1;

assign p_ZL10l1_weights_3_address1 = zext_ln38_4_fu_372_p1;

assign shl_ln1_fu_492_p3 = {{ap_sig_allocacmp_p_load}, {16'd0}};

assign shl_ln38_1_fu_526_p3 = {{tmp_3_fu_516_p4}, {16'd0}};

assign shl_ln38_2_fu_606_p3 = {{tmp_4_reg_873}, {16'd0}};

assign shl_ln38_3_fu_628_p3 = {{tmp_5_fu_618_p4}, {16'd0}};

assign shl_ln38_4_fu_652_p3 = {{trunc_ln38_3_fu_641_p4}, {16'd0}};

assign shl_ln38_5_fu_683_p3 = {{tmp_s_fu_673_p4}, {16'd0}};

assign shl_ln38_6_fu_717_p3 = {{tmp_14_fu_707_p4}, {16'd0}};

assign shl_ln38_7_fu_751_p3 = {{tmp_15_fu_741_p4}, {16'd0}};

assign tmp_14_fu_707_p4 = {{add_ln38_5_fu_691_p2[47:16]}};

assign tmp_15_fu_741_p4 = {{add_ln38_6_fu_725_p2[47:16]}};

assign tmp_3_fu_516_p4 = {{add_ln38_fu_500_p2[47:16]}};

assign tmp_5_fu_618_p4 = {{add_ln38_2_fu_613_p2[47:16]}};

assign tmp_s_fu_673_p4 = {{add_ln38_4_fu_660_p2[47:16]}};

assign trunc_ln38_3_fu_641_p4 = {{add_ln38_3_fu_636_p2[47:16]}};

assign trunc_ln38_3_out = {{add_ln38_3_fu_636_p2[47:16]}};

assign zext_ln35_1_fu_412_p1 = lshr_ln35_1_fu_402_p4;

assign zext_ln35_fu_354_p1 = lshr_ln3_fu_344_p4;

assign zext_ln38_10_fu_600_p1 = add_ln38_12_fu_595_p2;

assign zext_ln38_1_fu_386_p1 = or_ln35_fu_380_p2;

assign zext_ln38_2_fu_448_p1 = lshr_ln38_5_fu_438_p4;

assign zext_ln38_3_fu_585_p1 = or_ln38_fu_580_p2;

assign zext_ln38_4_fu_372_p1 = add_ln38_9_fu_366_p2;

assign zext_ln38_5_fu_417_p1 = lshr_ln35_1_fu_402_p4;

assign zext_ln38_6_fu_427_p1 = add_ln38_10_fu_421_p2;

assign zext_ln38_7_fu_453_p1 = lshr_ln38_5_fu_438_p4;

assign zext_ln38_8_fu_463_p1 = add_ln38_11_fu_457_p2;

assign zext_ln38_9_fu_591_p1 = or_ln38_fu_580_p2;

assign zext_ln38_fu_362_p1 = lshr_ln3_fu_344_p4;

endmodule //predict_predict_Pipeline_VITIS_LOOP_35_2
