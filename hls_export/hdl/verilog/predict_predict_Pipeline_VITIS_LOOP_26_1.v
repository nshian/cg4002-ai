// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module predict_predict_Pipeline_VITIS_LOOP_26_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_stream_TVALID,
        input_layer_3_address0,
        input_layer_3_ce0,
        input_layer_3_we0,
        input_layer_3_d0,
        input_layer_2_address0,
        input_layer_2_ce0,
        input_layer_2_we0,
        input_layer_2_d0,
        input_layer_1_address0,
        input_layer_1_ce0,
        input_layer_1_we0,
        input_layer_1_d0,
        input_layer_address0,
        input_layer_ce0,
        input_layer_we0,
        input_layer_d0,
        input_stream_TDATA,
        input_stream_TREADY,
        input_stream_TKEEP,
        input_stream_TSTRB,
        input_stream_TUSER,
        input_stream_TLAST,
        input_stream_TID,
        input_stream_TDEST
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   input_stream_TVALID;
output  [3:0] input_layer_3_address0;
output   input_layer_3_ce0;
output   input_layer_3_we0;
output  [31:0] input_layer_3_d0;
output  [3:0] input_layer_2_address0;
output   input_layer_2_ce0;
output   input_layer_2_we0;
output  [31:0] input_layer_2_d0;
output  [3:0] input_layer_1_address0;
output   input_layer_1_ce0;
output   input_layer_1_we0;
output  [31:0] input_layer_1_d0;
output  [3:0] input_layer_address0;
output   input_layer_ce0;
output   input_layer_we0;
output  [31:0] input_layer_d0;
input  [31:0] input_stream_TDATA;
output   input_stream_TREADY;
input  [3:0] input_stream_TKEEP;
input  [3:0] input_stream_TSTRB;
input  [1:0] input_stream_TUSER;
input  [0:0] input_stream_TLAST;
input  [4:0] input_stream_TID;
input  [5:0] input_stream_TDEST;

reg ap_idle;
reg input_layer_3_ce0;
reg input_layer_3_we0;
reg input_layer_2_ce0;
reg input_layer_2_we0;
reg input_layer_1_ce0;
reg input_layer_1_we0;
reg input_layer_ce0;
reg input_layer_we0;
reg input_stream_TREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln26_fu_156_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    input_stream_TDATA_blk_n;
wire   [63:0] zext_ln26_fu_182_p1;
reg   [5:0] i_fu_74;
wire   [5:0] add_ln26_fu_162_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_2;
wire   [1:0] trunc_ln26_fu_168_p1;
wire   [31:0] shl_ln28_fu_194_p2;
wire   [3:0] lshr_ln_fu_172_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_fu_74 = 6'd0;
#0 ap_done_reg = 1'b0;
end

predict_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln26_fu_156_p2 == 1'd0)) begin
            i_fu_74 <= add_ln26_fu_162_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_74 <= 6'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln26_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_2 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_layer_1_ce0 = 1'b1;
    end else begin
        input_layer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln26_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln26_fu_168_p1 == 2'd1))) begin
        input_layer_1_we0 = 1'b1;
    end else begin
        input_layer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_layer_2_ce0 = 1'b1;
    end else begin
        input_layer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln26_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln26_fu_168_p1 == 2'd2))) begin
        input_layer_2_we0 = 1'b1;
    end else begin
        input_layer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_layer_3_ce0 = 1'b1;
    end else begin
        input_layer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln26_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln26_fu_168_p1 == 2'd3))) begin
        input_layer_3_we0 = 1'b1;
    end else begin
        input_layer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_layer_ce0 = 1'b1;
    end else begin
        input_layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln26_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln26_fu_168_p1 == 2'd0))) begin
        input_layer_we0 = 1'b1;
    end else begin
        input_layer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        input_stream_TDATA_blk_n = input_stream_TVALID;
    end else begin
        input_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln26_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_stream_TREADY = 1'b1;
    end else begin
        input_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_162_p2 = (ap_sig_allocacmp_i_2 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln26_fu_156_p2 == 1'd0) & (input_stream_TVALID == 1'b0)));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln26_fu_156_p2 = ((ap_sig_allocacmp_i_2 == 6'd36) ? 1'b1 : 1'b0);

assign input_layer_1_address0 = zext_ln26_fu_182_p1;

assign input_layer_1_d0 = shl_ln28_fu_194_p2;

assign input_layer_2_address0 = zext_ln26_fu_182_p1;

assign input_layer_2_d0 = shl_ln28_fu_194_p2;

assign input_layer_3_address0 = zext_ln26_fu_182_p1;

assign input_layer_3_d0 = shl_ln28_fu_194_p2;

assign input_layer_address0 = zext_ln26_fu_182_p1;

assign input_layer_d0 = shl_ln28_fu_194_p2;

assign lshr_ln_fu_172_p4 = {{ap_sig_allocacmp_i_2[5:2]}};

assign shl_ln28_fu_194_p2 = input_stream_TDATA << 32'd16;

assign trunc_ln26_fu_168_p1 = ap_sig_allocacmp_i_2[1:0];

assign zext_ln26_fu_182_p1 = lshr_ln_fu_172_p4;

endmodule //predict_predict_Pipeline_VITIS_LOOP_26_1
