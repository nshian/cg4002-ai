#include <iostream>
#include "hls_stream.h"
#include "model.h"

#define NUM_SAMPLES 5

hls::stream<ap_axis<32,2,5,6>> input_stream;
hls::stream<ap_axis<32,2,5,6>> output_stream;

const float inputs[NUM_SAMPLES][INPUT_SIZE] = {
    {
        -1.9230e+00,  5.6460e+00,  7.4045e+01, -1.0269e+00,  1.3948e-01,
         8.9051e+00, -1.0098e+01,  1.0106e+01,  3.3109e+01, -1.0904e-01,
        -1.5151e+00,  1.4467e+01, -1.1136e+01,  1.0010e+01,  4.5010e+01,
        -9.4215e-01, -5.4542e-01,  1.5967e+01,  0.0000e+00,  4.5120e+00,
         8.8519e+00, -1.2393e-02, -9.7918e-01,  2.9164e+00, -3.0330e+00,
         4.1010e+00,  4.2187e+00,  1.5448e-01, -1.7862e+00,  2.8612e+00,
         0.0000e+00,  4.4330e+00,  8.6744e+00, -2.1258e-01, -1.0460e+00,
         2.9698e+00
    },
    {
        -1.8440e+00,  4.5260e+00,  1.3106e+01, -1.0284e+00,  2.8936e-02,
         5.2962e+00, -9.6020e+00,  4.9580e+00,  1.3190e+01, -6.1917e-01,
        -4.9850e-01,  1.1990e+01, -6.8280e+00,  1.0802e+01,  8.1115e+01,
        -1.0637e+00, -8.5732e-02,  1.4857e+01,  0.0000e+00,  3.3120e+00,
         8.0135e+00,  7.9283e-02, -8.2036e-01,  2.7881e+00,  0.0000e+00,
         2.9800e-01,  2.1409e+00, -3.0429e-01,  4.4660e+00,  1.4407e+00,
         0.0000e+00,  7.0900e-01,  2.1468e+00, -3.9703e-01,  1.7809e+00,
         1.4374e+00
    },
    {
        -0.5620,   6.3170,  64.4676,  -0.3895,   0.4276,   7.8750, -16.1530,
          9.7960,  22.8216,   0.1202,  -1.8106,  15.9382,  -9.9450,   2.7830,
         24.5562,  -0.7271,   1.6733,  11.5220,   0.0000,   4.4410,   7.0632,
         -0.2544,  -0.9376,   3.0090,  -0.9060,   2.0980,   2.6051,  -0.7664,
         -0.7856,   2.1521,   0.1440,   4.5610,   9.1965,  -0.3179,  -1.0095,
          3.1469
    },
    {
        -7.8500e-01,  2.8710e+00,  2.0557e+01,  1.9013e+00,  7.0240e+00,
         4.4603e+00, -1.0825e+01,  9.8570e+00,  1.1928e+02,  1.2856e+00,
         1.0245e+00,  1.4055e+01, -1.1407e+01,  2.1821e+01,  9.4221e+01,
        -4.3757e-01, -1.5254e+00,  1.9326e+01,  0.0000e+00,  4.5800e+00,
         9.2790e+00,  6.3832e-02, -1.0947e+00,  2.9846e+00,  2.4100e-01,
         9.0600e-01,  1.1618e+00,  6.9715e-01,  1.3198e+00,  1.0895e+00,
         1.8400e-01,  1.0610e+00,  2.8547e+00, -3.5519e-01,  1.0738e-01,
         1.6559e+00
    },
    {
        -2.0950e+00,  5.8480e+00,  1.7715e+01, -1.0420e+00, -3.0637e-01,
         5.9807e+00, -9.7300e+00,  2.1950e+00,  1.2973e+01, -7.0067e-01,
         8.1585e-01,  1.0990e+01, -7.8540e+00,  9.4330e+00,  6.3232e+01,
        -1.3487e+00,  6.0307e-01,  1.4290e+01,  0.0000e+00,  1.9760e+00,
         6.5256e+00, -2.4178e-02, -5.4800e-01,  2.5357e+00,  0.0000e+00,
         9.5700e-01,  3.2285e+00, -5.5246e-01,  1.0579e+00,  1.7676e+00,
         0.0000e+00,  1.5080e+00,  2.8327e+00, -4.7766e-01,  1.1174e+00,
         1.6500e+00
    }
};

const int truth[NUM_SAMPLES] = {4, 6, 4, 2, 6};

int main() {
	ap_axis<32,2,5,6> in, out;
    for (int i = 0; i < NUM_SAMPLES; i++) {
        for (int j = 0; j < INPUT_SIZE; j++) {
        	in.data = inputs[i][j] * 65536;
			in.keep = 1;
			in.strb = 1;
            in.last = (j == INPUT_SIZE - 1) ? 1 : 0;
            input_stream.write(in);
        }
        predict(input_stream, output_stream);
        output_stream.read(out);
        int pred = out.data;
        printf("Ground truth: %d, predicted: %d\n", truth[i], pred);
    }
}
