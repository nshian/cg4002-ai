#include <iostream>
#include "hls_stream.h"
#include "model.h"

#define NUM_SAMPLES 5

hls::stream<ap_axis<32,2,5,6>> input_stream;
hls::stream<ap_axis<32,2,5,6>> output_stream;

const float inputs[NUM_SAMPLES][INPUT_SIZE] = {
    {
        -1.6100e+00,  1.2140e+01,  1.1812e+02,  3.5350e-01, -1.5457e-01,
         1.1328e+01, -1.0072e+01,  1.0187e+01,  2.7264e+01, -2.0658e-01,
        -1.6793e+00,  1.4727e+01, -9.3350e+00,  7.9940e+00,  3.1209e+01,
        -4.9545e-01, -9.3515e-01,  1.3203e+01,  0.0000e+00,  1.1290e+00,
         2.6564e+00,  1.5855e-01,  1.0658e+00,  1.6473e+00,  0.0000e+00,
         1.3580e+00,  4.1928e+00,  5.1308e-01,  6.8582e-02,  2.0064e+00,
         0.0000e+00,  3.1750e+00,  9.1346e+00,  2.3218e-01, -9.3537e-01,
         2.9838e+00
    },
    {
       -0.1950,  4.5950, 46.6532,  0.1750,  1.0789,  6.6939, -9.2700, 12.0760,
        57.9847,  0.2038, -1.3027,  8.5476, -8.2240,  6.3540, 71.4197, -0.7057,
         1.4705, 10.4061,  0.0000,  1.6010,  4.9837,  0.3139, -0.2602,  2.2711,
         0.0000,  0.3460,  2.7714, -0.9184,  0.8045,  1.6932,  0.0000,  0.9150,
         1.8829,  0.8149,  1.5251,  1.4587 
    },
    {
        -1.5980,  2.4720, 13.6490, -0.9622,  1.8812,  4.2227, -9.8340,  7.4380,
        20.4778, -0.9519, -0.9282, 13.2916, -5.6720,  5.3410, 31.1594,  0.2460,
        -0.1771,  6.8635,  0.0000,  0.8610,  2.0223, -0.0826,  0.5321,  1.3941,
        -0.1830,  2.0570,  1.9080, -0.6718, -0.4634,  1.5734,  0.0000,  1.1880,
         6.8149, -0.2873, -0.5137,  2.5605
    },
    {
        -7.8690,  0.5580,  0.7450,  0.7419,  1.2144,  7.8088, -3.2330,  0.8700,
         0.5966,  0.4742, -0.2816,  3.3149, -4.2260,  0.4350,  0.3232, -0.1578,
        -0.5531,  4.2566,  0.0000,  0.1020,  0.0641,  1.0066,  1.5695,  0.2596,
         0.0000,  0.2540,  0.0628,  0.2737, -0.0505,  0.2604,  0.0000,  0.1050,
         0.0431,  0.5743,  1.0045,  0.2040
    },
    {
        -3.0750,   9.0500, 101.1731,   0.4402,   0.3127,  10.9931, -11.0500,
          7.2080,  16.4914,  -0.5470,  -1.3250,  13.6605,  -9.5910,   2.1520,
         49.3128,  -0.3996,   3.0189,  11.7207,   0.0000,   1.3250,   4.6989,
         -0.3383,   0.2982,   2.1239,  -0.1270,   1.0920,   2.0009,  -1.2492,
          2.2118,   1.3874,   0.1030,   3.7300,   7.6525,  -0.2260,  -0.6177,
          2.8205
    }
};

const int truth[NUM_SAMPLES] = {8, 3, 7, 5, 0};

int main() {
	ap_axis<32,2,5,6> in, out;
    for (int i = 0; i < NUM_SAMPLES; i++) {
        for (int j = 0; j < INPUT_SIZE; j++) {
        	in.data = inputs[i][j] * 65536;
			in.keep = 1;
			in.strb = 1;
            in.last = (j == INPUT_SIZE - 1) ? 1 : 0;
            input_stream.write(in);
        }
        predict(input_stream, output_stream);
        output_stream.read(out);
        int pred = out.data;
        printf("Ground truth: %d, predicted: %d\n", truth[i], pred);
    }
}
