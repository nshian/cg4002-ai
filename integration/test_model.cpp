#include <iostream>
#include "hls_stream.h"
#include "model.h"

#define NUM_SAMPLES 5

hls::stream<ap_axis<32,2,5,6>> input_stream;
hls::stream<ap_axis<32,2,5,6>> output_stream;

const float inputs[NUM_SAMPLES][INPUT_SIZE] = {
    {
        -1.2110e+00,  9.4190e+00,  5.2363e+01, -3.1914e-01, -6.0998e-01,
        7.1646e+00, -1.1897e+01,  1.1820e+01,  6.1554e+01,  6.2736e-01,
        -8.5258e-01,  1.2890e+01, -9.4390e+00,  1.0195e+01,  6.0448e+01,
        -3.4948e-01, -6.6539e-01,  1.4150e+01,  0.0000e+00,  2.4680e+00,
        6.1111e+00, -1.7010e-02, -6.8972e-01,  2.4305e+00,  0.0000e+00,
        1.8700e+00,  2.8650e+00, -7.4931e-01,  2.2949e-01,  1.6584e+00,
        1.8000e-01,  4.0860e+00,  7.6898e+00, -1.2607e-01, -7.7237e-01,
        2.7700e+00,  1.2810e+00,  8.5400e-01,  2.9485e-01,  2.3891e-01,
        -1.1303e+00,  1.5809e+00, -9.2940e+00,  2.0700e-01,  2.8011e-02,
        5.4980e-01, -2.0721e-01,  9.2748e+00, -1.1501e+01,  7.7100e-01,
        2.5161e-01,  7.1682e-01, -6.2354e-01,  1.1290e+01,  0.0000e+00,
        0.0000e+00,  8.7176e-03,  5.2759e-01,  1.7135e-01,  9.4731e-02,
        0.0000e+00,  0.0000e+00,  4.2140e-03,  5.4133e-01,  8.0056e-01,
        6.8282e-02,  0.0000e+00,  0.0000e+00,  2.2685e-02, -1.1391e+00,
        1.2972e+00,  1.5190e-01
    },
    {
        -2.2800e-01,  3.0000e+00,  3.6650e+01, -8.7176e-01,  2.8817e+00,
        6.1797e+00, -6.1590e+00,  1.0151e+01,  3.6846e+01,  4.6918e-01,
        -9.2122e-01,  7.6519e+00, -8.8520e+00,  1.1643e+01,  4.7187e+01,
        7.2838e-01, -9.3203e-01,  8.1405e+00,  0.0000e+00,  1.5570e+00,
        5.3085e+00,  1.6466e-01, -2.8711e-01,  2.3800e+00,  0.0000e+00,
        4.1100e-01,  4.0399e+00,  1.5384e-01,  8.6126e-01,  1.9706e+00,
        0.0000e+00,  7.2700e-01,  2.4350e+00,  1.4830e+00,  1.0969e+00,
        1.6583e+00, -9.7700e-01,  6.5800e-01,  1.2908e+00, -1.3935e+00,
        4.4849e+00,  1.5885e+00, -9.6330e+00,  2.0100e-01,  6.2080e-01,
        -6.2265e-01,  3.1959e+00,  9.5050e+00, -1.0599e+01,  5.5000e-01,
        2.9394e-01, -1.0384e+00,  1.8568e+00,  1.0559e+01,  0.0000e+00,
        0.0000e+00,  4.0653e-03, -1.2049e+00,  3.6811e+00,  6.3918e-02,
        0.0000e+00,  1.1800e-01,  9.0745e-02, -9.0206e-01,  9.9044e-01,
        2.9595e-01,  0.0000e+00,  0.0000e+00,  1.1175e-02, -1.4576e+00,
        4.1071e+00,  1.0418e-01
    },
    {
        -3.1980e+00,  4.6870e+00,  2.6181e+01, -1.4132e+00,  1.2781e+00,
        7.3991e+00, -9.1330e+00,  7.3440e+00,  3.4037e+01,  7.5082e-02,
        -3.9148e-01,  9.8333e+00, -8.3920e+00,  3.6150e+00,  7.0232e+00,
        -2.8835e-02,  2.9022e-01,  8.5413e+00,  0.0000e+00,  1.1690e+00,
        3.3186e+00,  3.0868e-01, -2.6385e-01,  1.7854e+00, -1.0300e-01,
        1.7150e+00,  4.3477e+00,  1.2224e-01, -5.4577e-01,  2.0481e+00,
        0.0000e+00,  1.3660e+00,  4.1514e+00,  3.7302e-01,  5.7589e-01,
        1.9972e+00,  3.6400e-01,  2.5620e+00,  2.0928e+01,  2.2949e+00,
        6.1714e+00,  4.8192e+00, -1.2300e-01,  7.0950e+00,  2.4891e+01,
        -2.0705e-01, -1.0961e+00,  5.4366e+00,  2.4200e-01,  3.5100e+00,
        1.0712e+01,  1.0859e+00,  3.6795e-01,  3.4567e+00,  0.0000e+00,
        1.2570e+00,  3.3530e+00, -5.8318e-01,  6.8571e-02,  1.8095e+00,
        0.0000e+00,  4.8800e-01,  1.0164e+00, -8.1681e-01,  2.9058e-01,
        9.9488e-01,  0.0000e+00,  1.6280e+00,  4.2001e+00,  2.3507e-01,
        -3.1180e-01,  2.0134e+00
    },
    {
        -1.9040,   4.0860,  23.6292,  -0.4626,   0.9556,   5.0409, -12.0270,
        5.3170,  12.6124,  -0.6935,  -0.6550,  13.6617,  -6.1210,   8.5600,
        33.0116,  -0.1472,  -1.0555,   7.6558,   0.0000,   2.7030,   3.7955,
        0.2680,  -0.6521,   1.9171,  -0.4060,   3.1090,   2.5258,  -0.2200,
        -1.3189,   1.7620,   0.1080,   4.1940,  10.2117,  -0.2214,  -1.1609,
        3.1448,  -1.2700,   2.6870,  18.0111,  -0.3909,  -0.1554,   4.5494,
        -9.4000,   2.5140,   9.1638,  -1.4110,   1.5765,  10.9053, -13.1210,
        3.7320,  25.1731,  -1.4871,   3.7111,  14.8014,   0.0000,   1.0820,
        3.3980,   0.6696,   0.1159,   1.8061,   0.2520,   0.6710,   5.7817,
        -0.1233,   0.2874,   2.3755,  -0.2560,   0.5050,   1.0144,  -0.3083,
        1.1685,   1.0656
    },
    {
        -3.5430e+00,  9.2100e+00,  1.0806e+02,  2.1997e-01, -3.3512e-01,
        1.0974e+01, -1.4012e+01,  7.1380e+00,  1.6997e+01, -1.5887e-01,
        -1.3832e+00,  1.4546e+01, -9.1900e+00,  5.4910e+00,  3.8296e+01,
        5.3192e-01,  2.0471e+00,  1.0330e+01,  0.0000e+00,  2.9970e+00,
        6.0670e+00, -3.8839e-01, -5.7653e-01,  2.4282e+00,  0.0000e+00,
        2.8150e+00,  3.1572e+00, -3.2123e-01, -7.4240e-01,  1.8101e+00,
        5.3800e-01,  5.3460e+00,  9.9239e+00, -3.3232e-01, -1.0103e+00,
        3.1537e+00, -8.8900e-01,  1.0480e+00,  1.9167e+00, -1.4499e+00,
        4.0060e+00,  1.7200e+00, -9.7750e+00,  8.4800e-01,  1.1976e+00,
        9.3109e-01,  1.2153e+00,  9.8602e+00, -1.0430e+01,  1.5260e+00,
        1.6077e+00,  3.8829e-01,  7.5234e-01,  1.0151e+01, -1.4200e-01,
        5.1100e-01,  1.4279e-01,  2.4782e-01, -5.2751e-01,  3.7427e-01,
        0.0000e+00,  5.0500e-01,  3.4834e-01, -1.1959e+00,  1.4840e+00,
        6.5870e-01,  0.0000e+00,  7.5600e-01,  1.0024e+00,  6.8836e-01,
        -4.0756e-02,  9.9310e-01
    }
};

const int truth[NUM_SAMPLES] = {1, 3, 4, 7, 0};

int main() {
	ap_axis<32,2,5,6> in, out;
    for (int i = 0; i < NUM_SAMPLES; i++) {
        for (int j = 0; j < INPUT_SIZE; j++) {
        	in.data = inputs[i][j];
			in.keep = 1;
			in.strb = 1;
            in.last = (j == INPUT_SIZE - 1) ? 1 : 0;
            input_stream.write(in);
        }
        predict(input_stream, output_stream);
        output_stream.read(out);
        int pred = out.data;
        printf("Ground truth: %d, predicted: %d\n", truth[i], pred);
    }
}
